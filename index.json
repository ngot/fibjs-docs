[
{
	"uri": "http://example.org/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "Fibjs "
},
{
	"uri": "http://example.org/modules/",
	"title": "Modules",
	"tags": [],
	"description": "",
	"content": "A bunch of Modules are available with this theme : assert 断言测试模块，如果测试值为假，则报错，报错行为可设定继续运行或者错误抛出 base32 base32 编码与解码模块 引用方式： base64 base64 编码与解码模块 引用方式： base64vlq base64vlq 编码与解码模块 引用方式： bson bson 编码与解码模块 引用方式： console 控制台访问对象 coroutine 并发控制模块 crypto 加密算法模块 db 数据库访问模块 encoding 编码与解码模块，用于处理不同的数据编码格式与二进制之间的转换 引用方式： fs 文件系统处理模块 gd 图像文件处理模块 global 全局对象，所有脚本均可以访问的基础对象 gui 输入输出处理模块 hash 信息摘要计算模块，可用于计算信息摘要和摘要签名 hex hex 编码与解码模块 引用方式： http 超文本传输协议模块，用以支持 http 协议处理 iconv iconv 编码与解码模块 引用方式： io 输入输出处理模块 json json 编码与解码模块 引用方式： mq 消息队列模块 net 网络访问模块 os 操作系统与文件系统处理模块 path 文件路径处理模块 process 进程处理模块，用以管理当前进程的资源 profiler 内存 profiler 模块 querystring http query 处理模块 re 正则表达式处理模块 registry Windows 注册表访问模块 引用方式： rpc RPC module. ssl ssl/tls 模块 test 测试套件模块，用以定义管理测试套件 url url 处理模块 util 常用工具模块 uuid uuid 唯一 id 模块 vm 安全沙箱模块，用于隔离不同安全等级的运行环境 websocket websocket support module ws websocket 支持模块 xml xml 处理模块 zip zip 格式文件压缩解压模块 zlib zlib 压缩解压模块 zmq zeroMQ 消息队列模块 "
},
{
	"uri": "http://example.org/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": "Objects : AsyncWait MessageHandler object for asynchronous waiting. Buffer 二进制数据缓存对象，用于 io 读写的数据处理 Expect 断言期望对象 "
},
{
	"uri": "http://example.org/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": "Fibjs Documentation "
},
{
	"uri": "http://example.org/object/asyncwait/",
	"title": "AsyncWait",
	"tags": [],
	"description": "MessageHandler object for asynchronous waiting.",
	"content": "class AsyncWait : public Handler MessageHandler object for asynchronous waiting. Summary Type Method and Description void end()Finish waiting, moving on to handle the message. Handler invoke(object v)handle a message or an object void dispose()Force dispose object immediately. String toString()Return string representation of object, normally is &amp;ldquo;[Native Object]&amp;rdquo; and can be implemented by object itself. Value toJSON(String key)Return JSON representation of object, normally is readable attributes collection. Value valueOf()Return JSON representation of object. Method Detail end void end() Finish waiting, moving on to handle the message. invoke Handler invoke(object v) handle a message or an object Parameters v specify the message or object to be handled Returns return the handler of the next step dispose void dispose() Force dispose object immediately. toString String toString() Return string representation of object, normally is &amp;ldquo;[Native Object]&amp;rdquo; and can be implemented by object itself. Returns Return string representation toJSON Value toJSON(String key) Return JSON representation of object, normally is readable attributes collection. Parameters key Not used Returns Return JSON representation valueOf Value valueOf() Return JSON representation of object. Returns Return JSON representation of object td { vertical-align: top; } "
},
{
	"uri": "http://example.org/object/buffer/",
	"title": "Buffer",
	"tags": [],
	"description": "二进制数据缓存对象，用于 io 读写的数据处理",
	"content": "class Buffer : public object 二进制数据缓存对象，用于 io 读写的数据处理 Buffer 对象为全局基础类，在任何时候都可以直接以 new Buffer(&amp;hellip;) 创建： var buf = new Buffer(); Constructor Summary Method and Description Buffer(Array datas)缓存对象构造函数 Buffer(ArrayBuffer datas)缓存对象构造函数 Buffer(TypedArray datas)缓存对象构造函数 Buffer(Buffer buffer)缓存对象构造函数 Buffer(String str,String codec)缓存对象构造函数 Buffer(Integer size)缓存对象构造函数 Field Summary Type Method and Description Integer public Integer operator[]operator[]operator[]缓存对象可使用下标直接访问二进制数据 readonly Integer public readonly Integer lengthlengthlength获取缓存对象的尺寸 Method Summary Type Method and Description void resize(Integer sz)修改缓存对象尺寸 void append(Array datas)在缓存对象尾部写入一组数据 void append(TypedArray datas)在缓存对象尾部写入一组数据 void append(ArrayBuffer datas)在缓存对象尾部写入一组数据 void append(Buffer data)在缓存对象尾部写入一组二进制数据 void append(String str,String codec)在缓存对象尾部写入字符串，字符串将以 utf-8 格式写入 Integer write(String str,Integer offset,Integer length,String codec)向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据 Integer write(String str,Integer offset,String codec)向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据 Integer write(String str,String codec)向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据 Buffer fill(Integer v,Integer offset,Integer end)为Buffer对象填充指定内容数据 Buffer fill(Buffer v,Integer offset,Integer end)为Buffer对象填充指定内容数据 Buffer fill(String v,Integer offset,Integer end)为Buffer对象填充指定内容数据 Integer indexOf(Integer v,Integer offset)返回某个指定数据在Buffer中首次出现的位置 Integer indexOf(Buffer v,Integer offset)返回某个指定数据在Buffer中首次出现的位置 Integer indexOf(String v,Integer offset)返回某个指定数据在Buffer中首次出现的位置 Integer compare(Buffer buf)比较缓存区的内容 Integer copy(Buffer targetBuffer,Integer targetStart,Integer sourceStart,Integer sourceEnd)从源缓存对象区域拷贝数据到目标缓存对象区域 Integer readUInt8(Integer offset,Boolean noAssert)从缓存对象读取一个 8 位无符号整型数值 Integer readUInt16LE(Integer offset,Boolean noAssert)从缓存对象读取一个 16 位无符号整型数值，以低字节序的存储方式 Integer readUInt16BE(Integer offset,Boolean noAssert)从缓存对象读取一个 16 位无符号整型数值，以高字节序的存储方式 Long readUInt32LE(Integer offset,Boolean noAssert)从缓存对象读取一个 32 位无符号整型数值，以低字节序的存储方式 Long readUInt32BE(Integer offset,Boolean noAssert)从缓存对象读取一个 32 位无符号整型数值，以高字节序的存储方式 Long readUIntLE(Integer offset,Boolean noAssert)从缓存对象读取一个无符号整型数值，最大支持 48 位，以低字节序的存储方式 Long readUIntBE(Integer offset,Boolean noAssert)从缓存对象读取一个无符号整型数值，最大支持 48 位，以高字节序的存储方式 Integer readInt8(Integer offset,Boolean noAssert)从缓存对象读取一个 8 位整型数值 Integer readInt16LE(Integer offset,Boolean noAssert)从缓存对象读取一个 16 位整型数值，以低字节序的存储方式 Integer readInt16BE(Integer offset,Boolean noAssert)从缓存对象读取一个 16 位整型数值，以高字节序的存储方式 Integer readInt32LE(Integer offset,Boolean noAssert)从缓存对象读取一个 32 位整型数值，以低字节序的存储方式 Integer readInt32BE(Integer offset,Boolean noAssert)从缓存对象读取一个 32 位整型数值，以高字节序的存储方式 Long readIntLE(Integer offset,Boolean noAssert)从缓存对象读取一个整型数值，最大支持 48 位，以低字节序的存储方式 Long readIntBE(Integer offset,Boolean noAssert)从缓存对象读取一个整型数值，最大支持 48 位，以高字节序的存储方式 Int64 readInt64LE(Integer offset,Boolean noAssert)从缓存对象读取一个 64 位整型数值，以低字节序的存储方式 Int64 readInt64BE(Integer offset,Boolean noAssert)从缓存对象读取一个 64 位整型数值，以高字节序的存储方式 Number readFloatLE(Integer offset,Boolean noAssert)从缓存对象读取一个浮点数，以低字节序的存储方式 Number readFloatBE(Integer offset,Boolean noAssert)从缓存对象读取一个浮点数，以高字节序的存储方式 Number readDoubleLE(Integer offset,Boolean noAssert)从缓存对象读取一个双精度浮点数，以低字节序的存储方式 Number readDoubleBE(Integer offset,Boolean noAssert)从缓存对象读取一个双精度浮点数，以高字节序的存储方式 void writeUInt8(Integer value,Integer offset,Boolean noAssert)向缓存对象写入一个 8 位无符号整型数值 void writeUInt16LE(Integer value,Integer offset,Boolean noAssert)向缓存对象写入一个 16 位无符号整型数值，以低字节序的存储方式 void writeUInt16BE(Integer value,Integer offset,Boolean noAssert)向缓存对象写入一个 16 位无符号整型数值，以高字节序的存储方式 void writeUInt32LE(Long value,Integer offset,Boolean noAssert)向缓存对象写入一个 32 位无符号整型数值，以低字节序的存储方式 void writeUInt32BE(Long value,Integer offset,Boolean noAssert)向缓存对象写入一个 32 位无符号整型数值，以高字节序的存储方式 void writeUIntLE(Long value,Integer offset,Boolean noAssert)向缓存对象写入一个无符号整型数值，最大支持 48 位，以低字节序的存储方式 void writeUIntBE(Long value,Integer offset,Boolean noAssert)向缓存对象写入一个无符号整型数值，最大支持 48 位，以高字节序的存储方式 void writeInt8(Integer value,Integer offset,Boolean noAssert)向缓存对象写入一个 8 位整型数值 void writeInt16LE(Integer value,Integer offset,Boolean noAssert)向缓存对象写入一个 16 位整型数值，以低字节序的存储方式 void writeInt16BE(Integer value,Integer offset,Boolean noAssert)向缓存对象写入一个 16 位整型数值，以高字节序的存储方式 void writeInt32LE(Integer value,Integer offset,Boolean noAssert)向缓存对象写入一个 32 位整型数值，以低字节序的存储方式 void writeInt32BE(Integer value,Integer offset,Boolean noAssert)向缓存对象写入一个 32 位整型数值，以高字节序的存储方式 void writeIntLE(Long value,Integer offset,Boolean noAssert)向缓存对象写入一个整型数值，最大支持 48 位，以低字节序的存储方式 void writeIntBE(Long value,Integer offset,Boolean noAssert)向缓存对象写入一个整型数值，最大支持 48 位，以高字节序的存储方式 void writeInt64LE(Int64 value,Integer offset,Boolean noAssert)向缓存对象写入一个 64 位整型数值，以低字节序的存储方式 void writeInt64BE(Int64 value,Integer offset,Boolean noAssert)向缓存对象写入一个 64 位整型数值，以高字节序的存储方式 void writeFloatLE(Number value,Integer offset,Boolean noAssert)向缓存对象写入一个浮点数，以低字节序的存储方式 void writeFloatBE(Number value,Integer offset,Boolean noAssert)向缓存对象写入一个浮点数，以高字节序的存储方式 void writeDoubleLE(Number value,Integer offset,Boolean noAssert)向缓存对象写入一个双精度浮点数，以低字节序的存储方式 void writeDoubleBE(Number value,Integer offset,Boolean noAssert)向缓存对象写入一个双精度浮点数，以高字节序的存储方式 Buffer slice(Integer start)返回一个新缓存对象，包含指定起始到缓存结尾的数据 Buffer slice(Integer start,Integer end)返回一个新缓存对象，包含指定范围的数据，若范围超出缓存，则只返回有效部分数据 String hex()使用 16 进制编码缓存对象内容 String base64()使用 base64 编码缓存对象内容 Array toArray()返回全部二进制数据的数组 String toString(String codec,Integer offset,Integer end)返回二进制数据的编码字符串 String toString()返回二进制数据的 utf8 编码字符串 void dispose()强制回收对象，调用此方法后，对象资源将立即释放 Boolean equals(object expected)比较当前对象与给定的对象是否相等 Value toJSON(String key)返回对象的 JSON 格式表示，一般返回对象定义的可读属性集合 Value valueOf()返回对象本身的数值 Boolean isBuffer(Value v)检测给定的变量是否是 Buffer 对象 Buffer concat(Array buflist,Integer cutLength)拼接多个缓存区中的数据 Constructor Detail Buffer Buffer(Array datas) 缓存对象构造函数 Parameters datas 初始化数据数组 Buffer Buffer(ArrayBuffer datas) 缓存对象构造函数 Parameters datas 初始化数据数组 Buffer Buffer(TypedArray datas) 缓存对象构造函数 Parameters datas 初始化数据数组 Buffer Buffer(Buffer buffer) 缓存对象构造函数 Parameters buffer 初始化Buffer对象 Buffer Buffer(String str,String codec) 缓存对象构造函数 Parameters str 初始化字符串，字符串将以 utf-8 格式写入，缺省则创建一个空对象 codec 指定编码格式，允许值为：&amp;rdquo;hex&amp;rdquo;, &amp;ldquo;base64&amp;rdquo;, &amp;ldquo;utf8&amp;rdquo;, 或者系统支持的字符集 Buffer Buffer(Integer size) 缓存对象构造函数 Parameters size 初始化缓冲区大小 Field Detail operator[] Integer public Integer operator[]operator[]operator[] 缓存对象可使用下标直接访问二进制数据 length readonly Integer public readonly Integer lengthlengthlength 获取缓存对象的尺寸 Method Detail resize void resize(Integer sz) 修改缓存对象尺寸 Parameters sz 指定新尺寸 append void append(Array datas) 在缓存对象尾部写入一组数据 Parameters datas 初始化数据数组 append void append(TypedArray datas) 在缓存对象尾部写入一组数据 Parameters datas 初始化数据数组 append void append(ArrayBuffer datas) 在缓存对象尾部写入一组数据 Parameters datas 初始化数据数组 append void append(Buffer data) 在缓存对象尾部写入一组二进制数据 Parameters data 初始化二进制数据 append void append(String str,String codec) 在缓存对象尾部写入字符串，字符串将以 utf-8 格式写入 Parameters str 要写入的字符串 codec 指定编码格式，允许值为：&amp;rdquo;hex&amp;rdquo;, &amp;ldquo;base64&amp;rdquo;, &amp;ldquo;utf8&amp;rdquo;, 或者系统支持的字符集 write Integer write(String str,Integer offset,Integer length,String codec) 向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据 Parameters str 待写入的字符串 offset 写入起始位置 length 写入长度（单位字节，默认值-1），未指定时为待写入字符串的长度 codec 指定编码格式，允许值为：&amp;rdquo;hex&amp;rdquo;, &amp;ldquo;base64&amp;rdquo;, &amp;ldquo;utf8&amp;rdquo;, 或者系统支持的字符集 Returns 写入的数据字节长度 write Integer write(String str,Integer offset,String codec) 向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据 Parameters str 待写入的字符串 offset 写入起始位置 codec 指定编码格式，允许值为：&amp;rdquo;hex&amp;rdquo;, &amp;ldquo;base64&amp;rdquo;, &amp;ldquo;utf8&amp;rdquo;, 或者系统支持的字符集 Returns 写入的数据字节长度 write Integer write(String str,String codec) 向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据 Parameters str 待写入的字符串 codec 指定编码格式，允许值为：&amp;rdquo;hex&amp;rdquo;, &amp;ldquo;base64&amp;rdquo;, &amp;ldquo;utf8&amp;rdquo;, 或者系统支持的字符集 Returns 写入的数据字节长度 fill Buffer fill(Integer v,Integer offset,Integer end) 为Buffer对象填充指定内容数据 Parameters v 需要填充的数据，如果未指定offset和end，将填充满整个buffer offset 填充起始位置 end 填充终止位置 Returns 返回当前 Buffer 对象 fill Buffer fill(Buffer v,Integer offset,Integer end) 为Buffer对象填充指定内容数据 Parameters v 需要填充的数据，如果未指定offset和end，将填充满整个buffer offset 填充起始位置 end 填充终止位置 Returns 返回当前 Buffer 对象 fill Buffer fill(String v,Integer offset,Integer end) 为Buffer对象填充指定内容数据 Parameters v 需要填充的数据，如果未指定offset和end，将填充满整个buffer offset 填充起始位置 end 填充终止位置 Returns 返回当前 Buffer 对象 indexOf Integer indexOf(Integer v,Integer offset) 返回某个指定数据在Buffer中首次出现的位置 Parameters v 待查找数据，如果未指定offset，默认从起始位开始 offset 起始查找位置 indexOf Integer indexOf(Buffer v,Integer offset) 返回某个指定数据在Buffer中首次出现的位置 Parameters v 待查找数据，如果未指定offset，默认从起始位开始 offset 起始查找位置 indexOf Integer indexOf(String v,Integer offset) 返回某个指定数据在Buffer中首次出现的位置 Parameters v 待查找数据，如果未指定offset，默认从起始位开始 offset 起始查找位置 compare Integer compare(Buffer buf) 比较缓存区的内容 Parameters buf 待比较缓存对象 Returns 内容比较结果 copy Integer copy(Buffer targetBuffer,Integer targetStart,Integer sourceStart,Integer sourceEnd) 从源缓存对象区域拷贝数据到目标缓存对象区域 Parameters targetBuffer 目标缓存对象 targetStart 目标缓存对象开始拷贝字节位置，缺省为 0 sourceStart 源缓存对象开始字节位置, 缺省为 0 sourceEnd 源缓存对象结束字节位置, 缺省为 -1,表示源数据长度 Returns 拷贝的数据字节长度 readUInt8 Integer readUInt8(Integer offset,Boolean noAssert) 从缓存对象读取一个 8 位无符号整型数值 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的整型数值 readUInt16LE Integer readUInt16LE(Integer offset,Boolean noAssert) 从缓存对象读取一个 16 位无符号整型数值，以低字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的整型数值 readUInt16BE Integer readUInt16BE(Integer offset,Boolean noAssert) 从缓存对象读取一个 16 位无符号整型数值，以高字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的整型数值 readUInt32LE Long readUInt32LE(Integer offset,Boolean noAssert) 从缓存对象读取一个 32 位无符号整型数值，以低字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的整型数值 readUInt32BE Long readUInt32BE(Integer offset,Boolean noAssert) 从缓存对象读取一个 32 位无符号整型数值，以高字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的整型数值 readUIntLE Long readUIntLE(Integer offset,Boolean noAssert) 从缓存对象读取一个无符号整型数值，最大支持 48 位，以低字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的整型数值 readUIntBE Long readUIntBE(Integer offset,Boolean noAssert) 从缓存对象读取一个无符号整型数值，最大支持 48 位，以高字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的整型数值 readInt8 Integer readInt8(Integer offset,Boolean noAssert) 从缓存对象读取一个 8 位整型数值 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的整型数值 readInt16LE Integer readInt16LE(Integer offset,Boolean noAssert) 从缓存对象读取一个 16 位整型数值，以低字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的整型数值 readInt16BE Integer readInt16BE(Integer offset,Boolean noAssert) 从缓存对象读取一个 16 位整型数值，以高字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的整型数值 readInt32LE Integer readInt32LE(Integer offset,Boolean noAssert) 从缓存对象读取一个 32 位整型数值，以低字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的整型数值 readInt32BE Integer readInt32BE(Integer offset,Boolean noAssert) 从缓存对象读取一个 32 位整型数值，以高字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的整型数值 readIntLE Long readIntLE(Integer offset,Boolean noAssert) 从缓存对象读取一个整型数值，最大支持 48 位，以低字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的整型数值 readIntBE Long readIntBE(Integer offset,Boolean noAssert) 从缓存对象读取一个整型数值，最大支持 48 位，以高字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的整型数值 readInt64LE Int64 readInt64LE(Integer offset,Boolean noAssert) 从缓存对象读取一个 64 位整型数值，以低字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的整型数值 readInt64BE Int64 readInt64BE(Integer offset,Boolean noAssert) 从缓存对象读取一个 64 位整型数值，以高字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的整型数值 readFloatLE Number readFloatLE(Integer offset,Boolean noAssert) 从缓存对象读取一个浮点数，以低字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的浮点数 readFloatBE Number readFloatBE(Integer offset,Boolean noAssert) 从缓存对象读取一个浮点数，以高字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的浮点数 readDoubleLE Number readDoubleLE(Integer offset,Boolean noAssert) 从缓存对象读取一个双精度浮点数，以低字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的双精度浮点数 readDoubleBE Number readDoubleBE(Integer offset,Boolean noAssert) 从缓存对象读取一个双精度浮点数，以高字节序的存储方式 Parameters offset 指定读取的起始位置，缺省为 0 noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出 Returns 返回读取的双精度浮点数 writeUInt8 void writeUInt8(Integer value,Integer offset,Boolean noAssert) 向缓存对象写入一个 8 位无符号整型数值 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeUInt16LE void writeUInt16LE(Integer value,Integer offset,Boolean noAssert) 向缓存对象写入一个 16 位无符号整型数值，以低字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeUInt16BE void writeUInt16BE(Integer value,Integer offset,Boolean noAssert) 向缓存对象写入一个 16 位无符号整型数值，以高字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeUInt32LE void writeUInt32LE(Long value,Integer offset,Boolean noAssert) 向缓存对象写入一个 32 位无符号整型数值，以低字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeUInt32BE void writeUInt32BE(Long value,Integer offset,Boolean noAssert) 向缓存对象写入一个 32 位无符号整型数值，以高字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeUIntLE void writeUIntLE(Long value,Integer offset,Boolean noAssert) 向缓存对象写入一个无符号整型数值，最大支持 48 位，以低字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeUIntBE void writeUIntBE(Long value,Integer offset,Boolean noAssert) 向缓存对象写入一个无符号整型数值，最大支持 48 位，以高字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeInt8 void writeInt8(Integer value,Integer offset,Boolean noAssert) 向缓存对象写入一个 8 位整型数值 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeInt16LE void writeInt16LE(Integer value,Integer offset,Boolean noAssert) 向缓存对象写入一个 16 位整型数值，以低字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeInt16BE void writeInt16BE(Integer value,Integer offset,Boolean noAssert) 向缓存对象写入一个 16 位整型数值，以高字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeInt32LE void writeInt32LE(Integer value,Integer offset,Boolean noAssert) 向缓存对象写入一个 32 位整型数值，以低字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeInt32BE void writeInt32BE(Integer value,Integer offset,Boolean noAssert) 向缓存对象写入一个 32 位整型数值，以高字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeIntLE void writeIntLE(Long value,Integer offset,Boolean noAssert) 向缓存对象写入一个整型数值，最大支持 48 位，以低字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeIntBE void writeIntBE(Long value,Integer offset,Boolean noAssert) 向缓存对象写入一个整型数值，最大支持 48 位，以高字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeInt64LE void writeInt64LE(Int64 value,Integer offset,Boolean noAssert) 向缓存对象写入一个 64 位整型数值，以低字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeInt64BE void writeInt64BE(Int64 value,Integer offset,Boolean noAssert) 向缓存对象写入一个 64 位整型数值，以高字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeFloatLE void writeFloatLE(Number value,Integer offset,Boolean noAssert) 向缓存对象写入一个浮点数，以低字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeFloatBE void writeFloatBE(Number value,Integer offset,Boolean noAssert) 向缓存对象写入一个浮点数，以高字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeDoubleLE void writeDoubleLE(Number value,Integer offset,Boolean noAssert) 向缓存对象写入一个双精度浮点数，以低字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 writeDoubleBE void writeDoubleBE(Number value,Integer offset,Boolean noAssert) 向缓存对象写入一个双精度浮点数，以高字节序的存储方式 Parameters value 指定写入的数值 offset 指定写入的起始位置 noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出 slice Buffer slice(Integer start) 返回一个新缓存对象，包含指定起始到缓存结尾的数据 Parameters start 指定范围的起始，缺省从头开始 Returns 返回新的缓存对象 slice Buffer slice(Integer start,Integer end) 返回一个新缓存对象，包含指定范围的数据，若范围超出缓存，则只返回有效部分数据 Parameters start 指定范围的起始 end 指定范围的结束 Returns 返回新的缓存对象 hex String hex() 使用 16 进制编码缓存对象内容 Returns 返回编码字符串 base64 String base64() 使用 base64 编码缓存对象内容 Returns 返回编码字符串 toArray Array toArray() 返回全部二进制数据的数组 Returns 返回包含对象数据的数组 toString String toString(String codec,Integer offset,Integer end) 返回二进制数据的编码字符串 Parameters codec 指定编码格式，允许值为：&amp;rdquo;hex&amp;rdquo;, &amp;ldquo;base64&amp;rdquo;, &amp;ldquo;utf8&amp;rdquo;, 或者系统支持的字符集 offset 读取起始位置 end 读取终止位置 Returns 返回对象的字符串表示 toString String toString() 返回二进制数据的 utf8 编码字符串 Returns 返回对象的字符串表示 dispose void dispose() 强制回收对象，调用此方法后，对象资源将立即释放 equals Boolean equals(object expected) 比较当前对象与给定的对象是否相等 Parameters expected 制定比较的目标对象 Returns 返回对象比较的结果 toJSON Value toJSON(String key) 返回对象的 JSON 格式表示，一般返回对象定义的可读属性集合 Parameters key 未使用 Returns 返回包含可 JSON 序列化的值 valueOf Value valueOf() 返回对象本身的数值 Returns 返回对象本身的数值 isBuffer Boolean isBuffer(Value v) 检测给定的变量是否是 Buffer 对象 Parameters v 给定需要检测的变量 Returns 传入对象是否 Buffer 对象 concat Buffer concat(Array buflist,Integer cutLength) 拼接多个缓存区中的数据 Parameters buflist 待拼接的Buffer数组 cutLength 截取多少个Buffer对象 Returns 拼接后产生的新 Buffer 对象 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/object/expect/",
	"title": "Expect",
	"tags": [],
	"description": "断言期望对象",
	"content": "class Expect : public object 断言期望对象 Expect 对象为 assert 模块内部对象，用于实现 expect 风格断言，创建： var test = require(&amp;quot;test&amp;quot;); var obj = test.expect(exp); 或者直接引用： var expect = require(&amp;quot;expect&amp;quot;); var obj = expect(exp); 或者通过 test.setup 配置： require(&amp;quot;test&amp;quot;).setup(); var obj = expect(exp); Field Summary Type Method and Description readonly Expect public readonly Expect tototo无任何修改，仅用于构建语义 readonly Expect public readonly Expect bebebe无任何修改，仅用于构建语义 readonly Expect public readonly Expect beenbeenbeen无任何修改，仅用于构建语义 readonly Expect public readonly Expect isisis无任何修改，仅用于构建语义 readonly Expect public readonly Expect thatthatthat无任何修改，仅用于构建语义 readonly Expect public readonly Expect andandand无任何修改，仅用于构建语义 readonly Expect public readonly Expect havehavehave无任何修改，仅用于构建语义 readonly Expect public readonly Expect withwithwith无任何修改，仅用于构建语义 readonly Expect public readonly Expect atatat无任何修改，仅用于构建语义 readonly Expect public readonly Expect ofofof无任何修改，仅用于构建语义 readonly Expect public readonly Expect samesamesame无任何修改，仅用于构建语义 readonly Expect public readonly Expect notnotnot取反当前比对 readonly Expect public readonly Expect deepdeepdeep标记当前比对为深度比较 readonly Boolean public readonly Boolean okokok断言给定数值为真，断言失败则抛出错误 readonly Boolean public readonly Boolean truetruetrue断言给定数值为 Boolean 类型 true，断言失败则抛出错误 readonly Boolean public readonly Boolean falsefalsefalse断言给定数值为 Boolean 类型 false，断言失败则抛出错误 readonly Boolean public readonly Boolean nullnullnull断言给定数值为 null，断言失败则抛出错误 readonly Boolean public readonly Boolean undefinedundefinedundefined断言给定数值为 undefined，断言失败则抛出错误 readonly Boolean public readonly Boolean functionfunctionfunction断言给定数值为函数，断言失败则抛出错误 readonly Boolean public readonly Boolean objectobjectobject断言给定数值为对象，断言失败则抛出错误 readonly Boolean public readonly Boolean arrayarrayarray断言给定数值为数组，断言失败则抛出错误 readonly Boolean public readonly Boolean stringstringstring断言给定数值为字符串，断言失败则抛出错误 readonly Boolean public readonly Boolean numbernumbernumber断言给定数值为数字，断言失败则抛出错误 readonly Boolean public readonly Boolean booleanbooleanboolean断言给定数值为 Boolean 类型，断言失败则抛出错误 readonly Boolean public readonly Boolean existexistexist断言给定数值存在，断言失败则抛出错误 Method Summary Type Method and Description void a(String type)断言给定数值为制定类型，断言失败则抛出错误 void an(String type)断言给定数值为制定类型，断言失败则抛出错误 void equal(Value expected)断言给定数值严格等于预期的数值，若标记 deep 则深度比较，断言失败则抛出错误 void eql(Value expected)断言给定数值严格等于预期的数值，若标记 deep 则深度比较，断言失败则抛出错误 void above(Value expected)断言给定数值大于预期的数值，断言失败则抛出错误 void greaterThan(Value expected)断言给定数值大于预期的数值，断言失败则抛出错误 void least(Value expected)断言给定数值最小为预期的数值，断言失败则抛出错误 void below(Value expected)断言给定数值小于预期的数值，断言失败则抛出错误 void lessThan(Value expected)断言给定数值小于预期的数值，断言失败则抛出错误 void most(Value expected)断言给定数值最大为预期的数值，断言失败则抛出错误 void property(Value prop)断言给定数值包含指定属性，标记 deep 则深度比较，断言失败则抛出错误 void property(Value prop,Value value)断言给定数值指定属性的值为给定值，标记 deep 则深度比较，断言失败则抛出错误 void closeTo(Value expected,Value delta)测试数值近似等于预期值，断言失败则抛出错误 void dispose()强制回收对象，调用此方法后，对象资源将立即释放 Boolean equals(object expected)比较当前对象与给定的对象是否相等 String toString()返回对象的字符串表示，一般返回 &amp;ldquo;[Native Object]&amp;ldquo;，对象可以根据自己的特性重新实现 Value toJSON(String key)返回对象的 JSON 格式表示，一般返回对象定义的可读属性集合 Value valueOf()返回对象本身的数值 Field Detail to readonly Expect public readonly Expect tototo 无任何修改，仅用于构建语义 Returns 返回对象本身 be readonly Expect public readonly Expect bebebe 无任何修改，仅用于构建语义 Returns 返回对象本身 been readonly Expect public readonly Expect beenbeenbeen 无任何修改，仅用于构建语义 Returns 返回对象本身 is readonly Expect public readonly Expect isisis 无任何修改，仅用于构建语义 Returns 返回对象本身 that readonly Expect public readonly Expect thatthatthat 无任何修改，仅用于构建语义 Returns 返回对象本身 and readonly Expect public readonly Expect andandand 无任何修改，仅用于构建语义 Returns 返回对象本身 have readonly Expect public readonly Expect havehavehave 无任何修改，仅用于构建语义 Returns 返回对象本身 with readonly Expect public readonly Expect withwithwith 无任何修改，仅用于构建语义 Returns 返回对象本身 at readonly Expect public readonly Expect atatat 无任何修改，仅用于构建语义 Returns 返回对象本身 of readonly Expect public readonly Expect ofofof 无任何修改，仅用于构建语义 Returns 返回对象本身 same readonly Expect public readonly Expect samesamesame 无任何修改，仅用于构建语义 Returns 返回对象本身 not readonly Expect public readonly Expect notnotnot 取反当前比对 Returns 返回对象本身 deep readonly Expect public readonly Expect deepdeepdeep 标记当前比对为深度比较 Returns 返回对象本身 ok readonly Boolean public readonly Boolean okokok 断言给定数值为真，断言失败则抛出错误 true readonly Boolean public readonly Boolean truetruetrue 断言给定数值为 Boolean 类型 true，断言失败则抛出错误 false readonly Boolean public readonly Boolean falsefalsefalse 断言给定数值为 Boolean 类型 false，断言失败则抛出错误 null readonly Boolean public readonly Boolean nullnullnull 断言给定数值为 null，断言失败则抛出错误 undefined readonly Boolean public readonly Boolean undefinedundefinedundefined 断言给定数值为 undefined，断言失败则抛出错误 function readonly Boolean public readonly Boolean functionfunctionfunction 断言给定数值为函数，断言失败则抛出错误 object readonly Boolean public readonly Boolean objectobjectobject 断言给定数值为对象，断言失败则抛出错误 array readonly Boolean public readonly Boolean arrayarrayarray 断言给定数值为数组，断言失败则抛出错误 string readonly Boolean public readonly Boolean stringstringstring 断言给定数值为字符串，断言失败则抛出错误 number readonly Boolean public readonly Boolean numbernumbernumber 断言给定数值为数字，断言失败则抛出错误 boolean readonly Boolean public readonly Boolean booleanbooleanboolean 断言给定数值为 Boolean 类型，断言失败则抛出错误 exist readonly Boolean public readonly Boolean existexistexist 断言给定数值存在，断言失败则抛出错误 Method Detail a void a(String type) 断言给定数值为制定类型，断言失败则抛出错误 Parameters type 指定断言的数据类型字符串 an void an(String type) 断言给定数值为制定类型，断言失败则抛出错误 Parameters type 指定断言的数据类型字符串 equal void equal(Value expected) 断言给定数值严格等于预期的数值，若标记 deep 则深度比较，断言失败则抛出错误 Parameters expected 预期的数值 eql void eql(Value expected) 断言给定数值严格等于预期的数值，若标记 deep 则深度比较，断言失败则抛出错误 Parameters expected 预期的数值 above void above(Value expected) 断言给定数值大于预期的数值，断言失败则抛出错误 Parameters expected 预期的数值 greaterThan void greaterThan(Value expected) 断言给定数值大于预期的数值，断言失败则抛出错误 Parameters expected 预期的数值 least void least(Value expected) 断言给定数值最小为预期的数值，断言失败则抛出错误 Parameters expected 预期的数值 below void below(Value expected) 断言给定数值小于预期的数值，断言失败则抛出错误 Parameters expected 预期的数值 lessThan void lessThan(Value expected) 断言给定数值小于预期的数值，断言失败则抛出错误 Parameters expected 预期的数值 most void most(Value expected) 断言给定数值最大为预期的数值，断言失败则抛出错误 Parameters expected 预期的数值 property void property(Value prop) 断言给定数值包含指定属性，标记 deep 则深度比较，断言失败则抛出错误 Parameters prop 要测试的属性 property void property(Value prop,Value value) 断言给定数值指定属性的值为给定值，标记 deep 则深度比较，断言失败则抛出错误 Parameters prop 要测试的属性 value 给定的值 closeTo void closeTo(Value expected,Value delta) 测试数值近似等于预期值，断言失败则抛出错误 Parameters expected 预期的数值 delta 近似的小数精度 dispose void dispose() 强制回收对象，调用此方法后，对象资源将立即释放 equals Boolean equals(object expected) 比较当前对象与给定的对象是否相等 Parameters expected 制定比较的目标对象 Returns 返回对象比较的结果 toString String toString() 返回对象的字符串表示，一般返回 &amp;ldquo;[Native Object]&amp;ldquo;，对象可以根据自己的特性重新实现 Returns 返回对象的字符串表示 toJSON Value toJSON(String key) 返回对象的 JSON 格式表示，一般返回对象定义的可读属性集合 Parameters key 未使用 Returns 返回包含可 JSON 序列化的值 valueOf Value valueOf() 返回对象本身的数值 Returns 返回对象本身的数值 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/",
	"title": "Modules",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/object/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/module/assert/",
	"title": "assert",
	"tags": [],
	"description": "断言测试模块，如果测试值为假，则报错，报错行为可设定继续运行或者错误抛出",
	"content": "断言测试模块，如果测试值为假，则报错，报错行为可设定继续运行或者错误抛出 引用方法： var assert = require(&#39;assert&#39;); 或者通过 test 模块引用： var test = require(&#39;test&#39;); var assert = test.assert; 或者通过 test.setup 配置： require(&amp;quot;test&amp;quot;).setup(); Method Summary Type Method and Description void Function(Value actual,String msg)测试数值为真，为假则断言失败 void ok(Value actual,String msg)测试数值为真，为假则断言失败 void notOk(Value actual,String msg)测试数值为假，为真则断言失败 void equal(Value actual,Value expected,String msg)测试数值等于预期值，不相等则断言失败 void notEqual(Value actual,Value expected,String msg)测试数值不等于预期值，相等则断言失败 void strictEqual(Value actual,Value expected,String msg)测试数值严格等于预期值，不相等则断言失败 void notStrictEqual(Value actual,Value expected,String msg)测试数值不严格等于预期值，相等则断言失败 void deepEqual(Value actual,Value expected,String msg)测试数值深度等于预期值，不相等则断言失败 void notDeepEqual(Value actual,Value expected,String msg)测试数值不深度等于预期值，相等则断言失败 void closeTo(Value actual,Value expected,Value delta,String msg)测试数值近似等于预期值，否则断言失败 void notCloseTo(Value actual,Value expected,Value delta,String msg)测试数值不近似等于预期值，否则断言失败 void lessThan(Value actual,Value expected,String msg)测试数值小于预期值，大于或等于则断言失败 void notLessThan(Value actual,Value expected,String msg)测试数值不小于预期值，小于则断言失败 void greaterThan(Value actual,Value expected,String msg)测试数值大于预期值，小于或等于则断言失败 void notGreaterThan(Value actual,Value expected,String msg)测试数值不大于预期值，大于则断言失败 void exist(Value actual,String msg)测试变量存在，为假则断言失败 void notExist(Value actual,String msg)测试变量不存在，为真则断言失败 void isTrue(Value actual,String msg)测试数值为布尔值真，否则断言失败 void isNotTrue(Value actual,String msg)测试数值不为布尔值真，否则断言失败 void isFalse(Value actual,String msg)测试数值为布尔值假，否则断言失败 void isNotFalse(Value actual,String msg)测试数值不为布尔值假，否则断言失败 void isNull(Value actual,String msg)测试数值为 Null，否则断言失败 void isNotNull(Value actual,String msg)测试数值不为 Null，否则断言失败 void isUndefined(Value actual,String msg)测试数值为 undefined，否则断言失败 void isDefined(Value actual,String msg)测试数值不为 undefined，否则断言失败 void isFunction(Value actual,String msg)测试数值为函数，否则断言失败 void isNotFunction(Value actual,String msg)测试数值不为函数，否则断言失败 void isObject(Value actual,String msg)测试数值为对象，否则断言失败 void isNotObject(Value actual,String msg)测试数值不为对象，否则断言失败 void isArray(Value actual,String msg)测试数值为数组，否则断言失败 void isNotArray(Value actual,String msg)测试数值不为数组，否则断言失败 void isString(Value actual,String msg)测试数值为字符串，否则断言失败 void isNotString(Value actual,String msg)测试数值不为字符串，否则断言失败 void isNumber(Value actual,String msg)测试数值为数字，否则断言失败 void isNotNumber(Value actual,String msg)测试数值不为数字，否则断言失败 void isBoolean(Value actual,String msg)测试数值为布尔，否则断言失败 void isNotBoolean(Value actual,String msg)测试数值不为布尔，否则断言失败 void typeOf(Value actual,String type,String msg)测试数值为给定类型，否则断言失败 void notTypeOf(Value actual,String type,String msg)测试数值不为给定类型，否则断言失败 void property(Value object,Value prop,String msg)测试对象中包含指定属性，否则断言失败 void notProperty(Value object,Value prop,String msg)测试对象中不包含指定属性，否则断言失败 void deepProperty(Value object,Value prop,String msg)深度测试对象中包含指定属性，否则断言失败 void notDeepProperty(Value object,Value prop,String msg)深度测试对象中不包含指定属性，否则断言失败 void propertyVal(Value object,Value prop,Value value,String msg)测试对象中指定属性的值为给定值，否则断言失败 void propertyNotVal(Value object,Value prop,Value value,String msg)测试对象中指定属性的值不为给定值，否则断言失败 void deepPropertyVal(Value object,Value prop,Value value,String msg)深度测试对象中指定属性的值为给定值，否则断言失败 void deepPropertyNotVal(Value object,Value prop,Value value,String msg)深度测试对象中指定属性的值不为给定值，否则断言失败 void throws(Function block,String msg)测试给定的代码会抛出错误，未抛出则断言失败 void doesNotThrow(Function block,String msg)测试给定的代码不会抛出错误，抛出则断言失败 Method Detail Function void Function(Value actual,String msg) 测试数值为真，为假则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 ok void ok(Value actual,String msg) 测试数值为真，为假则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 notOk void notOk(Value actual,String msg) 测试数值为假，为真则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 equal void equal(Value actual,Value expected,String msg) 测试数值等于预期值，不相等则断言失败 Parameters actual 要测试的数值 expected 预期的数值 msg 断言失败时的提示信息 notEqual void notEqual(Value actual,Value expected,String msg) 测试数值不等于预期值，相等则断言失败 Parameters actual 要测试的数值 expected 预期的数值 msg 断言失败时的提示信息 strictEqual void strictEqual(Value actual,Value expected,String msg) 测试数值严格等于预期值，不相等则断言失败 Parameters actual 要测试的数值 expected 预期的数值 msg 断言失败时的提示信息 notStrictEqual void notStrictEqual(Value actual,Value expected,String msg) 测试数值不严格等于预期值，相等则断言失败 Parameters actual 要测试的数值 expected 预期的数值 msg 断言失败时的提示信息 deepEqual void deepEqual(Value actual,Value expected,String msg) 测试数值深度等于预期值，不相等则断言失败 Parameters actual 要测试的数值 expected 预期的数值 msg 断言失败时的提示信息 notDeepEqual void notDeepEqual(Value actual,Value expected,String msg) 测试数值不深度等于预期值，相等则断言失败 Parameters actual 要测试的数值 expected 预期的数值 msg 断言失败时的提示信息 closeTo void closeTo(Value actual,Value expected,Value delta,String msg) 测试数值近似等于预期值，否则断言失败 Parameters actual 要测试的数值 expected 预期的数值 delta 近似的小数精度 msg 断言失败时的提示信息 notCloseTo void notCloseTo(Value actual,Value expected,Value delta,String msg) 测试数值不近似等于预期值，否则断言失败 Parameters actual 要测试的数值 expected 预期的数值 delta 近似的小数精度 msg 断言失败时的提示信息 lessThan void lessThan(Value actual,Value expected,String msg) 测试数值小于预期值，大于或等于则断言失败 Parameters actual 要测试的数值 expected 预期的数值 msg 断言失败时的提示信息 notLessThan void notLessThan(Value actual,Value expected,String msg) 测试数值不小于预期值，小于则断言失败 Parameters actual 要测试的数值 expected 预期的数值 msg 断言失败时的提示信息 greaterThan void greaterThan(Value actual,Value expected,String msg) 测试数值大于预期值，小于或等于则断言失败 Parameters actual 要测试的数值 expected 预期的数值 msg 断言失败时的提示信息 notGreaterThan void notGreaterThan(Value actual,Value expected,String msg) 测试数值不大于预期值，大于则断言失败 Parameters actual 要测试的数值 expected 预期的数值 msg 断言失败时的提示信息 exist void exist(Value actual,String msg) 测试变量存在，为假则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 notExist void notExist(Value actual,String msg) 测试变量不存在，为真则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isTrue void isTrue(Value actual,String msg) 测试数值为布尔值真，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isNotTrue void isNotTrue(Value actual,String msg) 测试数值不为布尔值真，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isFalse void isFalse(Value actual,String msg) 测试数值为布尔值假，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isNotFalse void isNotFalse(Value actual,String msg) 测试数值不为布尔值假，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isNull void isNull(Value actual,String msg) 测试数值为 Null，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isNotNull void isNotNull(Value actual,String msg) 测试数值不为 Null，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isUndefined void isUndefined(Value actual,String msg) 测试数值为 undefined，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isDefined void isDefined(Value actual,String msg) 测试数值不为 undefined，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isFunction void isFunction(Value actual,String msg) 测试数值为函数，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isNotFunction void isNotFunction(Value actual,String msg) 测试数值不为函数，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isObject void isObject(Value actual,String msg) 测试数值为对象，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isNotObject void isNotObject(Value actual,String msg) 测试数值不为对象，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isArray void isArray(Value actual,String msg) 测试数值为数组，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isNotArray void isNotArray(Value actual,String msg) 测试数值不为数组，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isString void isString(Value actual,String msg) 测试数值为字符串，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isNotString void isNotString(Value actual,String msg) 测试数值不为字符串，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isNumber void isNumber(Value actual,String msg) 测试数值为数字，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isNotNumber void isNotNumber(Value actual,String msg) 测试数值不为数字，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isBoolean void isBoolean(Value actual,String msg) 测试数值为布尔，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 isNotBoolean void isNotBoolean(Value actual,String msg) 测试数值不为布尔，否则断言失败 Parameters actual 要测试的数值 msg 断言失败时的提示信息 typeOf void typeOf(Value actual,String type,String msg) 测试数值为给定类型，否则断言失败 Parameters actual 要测试的数值 type 指定的类型 msg 断言失败时的提示信息 notTypeOf void notTypeOf(Value actual,String type,String msg) 测试数值不为给定类型，否则断言失败 Parameters actual 要测试的数值 type 指定的类型 msg 断言失败时的提示信息 property void property(Value object,Value prop,String msg) 测试对象中包含指定属性，否则断言失败 Parameters object 要测试的对象 prop 要测试的属性 msg 断言失败时的提示信息 notProperty void notProperty(Value object,Value prop,String msg) 测试对象中不包含指定属性，否则断言失败 Parameters object 要测试的对象 prop 要测试的属性 msg 断言失败时的提示信息 deepProperty void deepProperty(Value object,Value prop,String msg) 深度测试对象中包含指定属性，否则断言失败 Parameters object 要测试的对象 prop 要测试的属性，以“.”分割 msg 断言失败时的提示信息 notDeepProperty void notDeepProperty(Value object,Value prop,String msg) 深度测试对象中不包含指定属性，否则断言失败 Parameters object 要测试的对象 prop 要测试的属性，以“.”分割 msg 断言失败时的提示信息 propertyVal void propertyVal(Value object,Value prop,Value value,String msg) 测试对象中指定属性的值为给定值，否则断言失败 Parameters object 要测试的对象 prop 要测试的属性 value 给定的值 msg 断言失败时的提示信息 propertyNotVal void propertyNotVal(Value object,Value prop,Value value,String msg) 测试对象中指定属性的值不为给定值，否则断言失败 Parameters object 要测试的对象 prop 要测试的属性 value 给定的值 msg 断言失败时的提示信息 deepPropertyVal void deepPropertyVal(Value object,Value prop,Value value,String msg) 深度测试对象中指定属性的值为给定值，否则断言失败 Parameters object 要测试的对象 prop 要测试的属性，以“.”分割 value 给定的值 msg 断言失败时的提示信息 deepPropertyNotVal void deepPropertyNotVal(Value object,Value prop,Value value,String msg) 深度测试对象中指定属性的值不为给定值，否则断言失败 Parameters object 要测试的对象 prop 要测试的属性，以“.”分割 value 给定的值 msg 断言失败时的提示信息 throws void throws(Function block,String msg) 测试给定的代码会抛出错误，未抛出则断言失败 Parameters block 指定测试的代码，以函数形式给出 msg 断言失败时的提示信息 doesNotThrow void doesNotThrow(Function block,String msg) 测试给定的代码不会抛出错误，抛出则断言失败 Parameters block 指定测试的代码，以函数形式给出 msg 断言失败时的提示信息 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/base32/",
	"title": "base32",
	"tags": [],
	"description": "base32 编码与解码模块 引用方式：",
	"content": "base32 编码与解码模块 引用方式： var encoding = require(&#39;encoding&#39;); var base32 = encoding.base32; 或者 var base32 = require(&#39;base32&#39;); Method Summary Type Method and Description String encode(Buffer data)以 base32 方式编码数据 Buffer decode(String data)以 base32 方式解码字符串为二进制数据 Method Detail encode String encode(Buffer data) 以 base32 方式编码数据 Parameters data 要编码的数据 Returns 返回编码的字符串 decode Buffer decode(String data) 以 base32 方式解码字符串为二进制数据 Parameters data 要解码的字符串 Returns 返回解码的二进制数据 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/base64/",
	"title": "base64",
	"tags": [],
	"description": "base64 编码与解码模块 引用方式：",
	"content": "base64 编码与解码模块 引用方式： var encoding = require(&#39;encoding&#39;); var base64 = encoding.base64; 或者 var base64 = require(&#39;base64&#39;); Method Summary Type Method and Description String encode(Buffer data)以 base64 方式编码数据 Buffer decode(String data)以 base64 方式解码字符串为二进制数据 Method Detail encode String encode(Buffer data) 以 base64 方式编码数据 Parameters data 要编码的数据 Returns 返回编码的字符串 decode Buffer decode(String data) 以 base64 方式解码字符串为二进制数据 Parameters data 要解码的字符串 Returns 返回解码的二进制数据 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/base64vlq/",
	"title": "base64vlq",
	"tags": [],
	"description": "base64vlq 编码与解码模块 引用方式：",
	"content": "base64vlq 编码与解码模块 引用方式： var encoding = require(&#39;encoding&#39;); var base64vlq = encoding.base64vlq; 或者 var base64vlq = require(&#39;base64vlq&#39;); Method Summary Type Method and Description String encode(Integer data)以 base64vlq 方式编码数据 String encode(Array data)以 base64vlq 方式编码数据 Array decode(String data)以 base64vlq 方式解码字符串为二进制数据 Method Detail encode String encode(Integer data) 以 base64vlq 方式编码数据 Parameters data 要编码的数据 Returns 返回编码的字符串 encode String encode(Array data) 以 base64vlq 方式编码数据 Parameters data 要编码的数据 Returns 返回编码的字符串 decode Array decode(String data) 以 base64vlq 方式解码字符串为二进制数据 Parameters data 要解码的字符串 Returns 返回解码的二进制数据 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/bson/",
	"title": "bson",
	"tags": [],
	"description": "bson 编码与解码模块 引用方式：",
	"content": "bson 编码与解码模块 引用方式： var encoding = require(&#39;encoding&#39;); var bson = encoding.bson; 或者 var bson = require(&#39;bson&#39;); Method Summary Type Method and Description Buffer encode(Object data)以 bson 格式编码变量 Object decode(Buffer data)以 bson 方式解码字符串为一个变量 Method Detail encode Buffer encode(Object data) 以 bson 格式编码变量 Parameters data 要编码的变量 Returns 返回编码的二进制数据 decode Object decode(Buffer data) 以 bson 方式解码字符串为一个变量 Parameters data 要解码的二进制数据 Returns 返回解码的变量 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/console/",
	"title": "console",
	"tags": [],
	"description": "控制台访问对象",
	"content": "控制台访问对象 全局对象。可用于提示信息，警告和错误记录。通过启动配置文件，可将日志定位 到不同的设备，以便于跟踪。日志支持格式化输出，例如： console.log(&amp;quot;%d + %d = %d&amp;quot;, 100, 200, 100 + 200); 可以使用的格式化参数如下： s - 字符串 d - 数字，包括整数和数字 j - 以 JSON 格式输出对象 %% - 输出字符 &amp;ldquo; 本身 Field Summary Type Method and Description const public const FATALFATALFATALloglevel 级别常量 const public const ALERTALERTALERTloglevel 级别常量 const public const CRITCRITCRITloglevel 级别常量 const public const ERRORERRORERRORloglevel 级别常量 const public const WARNWARNWARNloglevel 级别常量 const public const NOTICENOTICENOTICEloglevel 级别常量 const public const INFOINFOINFOloglevel 级别常量 const public const DEBUGDEBUGDEBUGloglevel 级别常量 const public const PRINTPRINTPRINTloglevel 仅用于输出，信息输出后不换行，file 和 syslog 不保存此级别信息 const public const NOTSETNOTSETNOTSETloglevel 级别常量 Integer public static Integer loglevelloglevelloglevel输出级别，用以过滤输出信息，缺省为 NOTSET，全部输出。信息过滤之后才会输出给 add 设定的各个设备。 readonly TextColor public static readonly TextColor colorscolorscolors终端输出颜色配置对象，详见 TextColor readonly Integer public static readonly Integer widthwidthwidth查询终端每行字符数 readonly Integer public static readonly Integer heightheightheight查询终端行数 Method Summary Type Method and Description void add(Array cfg)批量添加 console 输出系统，支持的设备为 console, syslog 和 file，最多可以添加 10 个输出 void add(Value cfg)添加 console 输出系统，支持的设备为 console, syslog 和 file，最多可以添加 10 个输出 void reset()初始化到缺省设置，只在 console 输出信息 void log(String fmt,...)记录普通日志信息，与 info 等同 void log(...)记录普通日志信息，与 info 等同 void debug(String fmt,...)记录调试日志信息 void debug(...)记录调试日志信息 void info(String fmt,...)记录普通日志信息，与 log 等同 void info(...)记录普通日志信息，与 log 等同 void notice(String fmt,...)记录警告日志信息 void notice(...)记录警告日志信息 void warn(String fmt,...)记录警告日志信息 void warn(...)记录警告日志信息 void error(String fmt,...)记录错误日志信息 void error(...)记录错误日志信息 void crit(String fmt,...)记录关键错误日志信息 void crit(...)记录关键错误日志信息 void alert(String fmt,...)记录警报错误日志信息 void alert(...)记录警报错误日志信息 void dir(Value obj)用 JSON 格式输出对象 void time(String label)启动一个计时器 void timeEnd(String label)统计指定计时器的数值 void trace(String label)输出当前调用堆栈 void assert(Value value,String msg)断言测试，如果测试值为假，则报错 void print(String fmt,...)向控制台输出格式化文本，输出内容不会记入日志系统，输出文本后不会自动换行，可连续输出 void print(...)向控制台输出格式化文本，输出内容不会记入日志系统，输出文本后不会自动换行，可连续输出 void moveTo(Integer row,Integer column)移动控制台光标到指定位置 void hideCursor()隐藏控制台光标 void showCursor()显示控制台光标 void clear()清除控制台 void keyDown(String key,String modifier)按下一个按键 void keyDown(String key,Array modifier)按下一个按键 void keyUp(String key,String modifier)松开一个按键 void keyUp(String key,Array modifier)松开一个按键 void keyTap(String key,String modifier)点击并松开一个按键 void keyTap(String key,Array modifier)点击并松开一个按键 void typeString(String text)输入一个字符串 void moveMouse(Integer x,Integer y)移动鼠标到指定的位置 void mouseUp(String button)按下一个鼠标键 void mouseDown(String button)放开一个鼠标键 void clickMouse(String button,Boolean dbclick)点击一个鼠标键 String readLine(String msg)从控制台读取用户输入 Field Detail FATAL const public const FATALFATALFATAL loglevel 级别常量 ALERT const public const ALERTALERTALERT loglevel 级别常量 CRIT const public const CRITCRITCRIT loglevel 级别常量 ERROR const public const ERRORERRORERROR loglevel 级别常量 WARN const public const WARNWARNWARN loglevel 级别常量 NOTICE const public const NOTICENOTICENOTICE loglevel 级别常量 INFO const public const INFOINFOINFO loglevel 级别常量 DEBUG const public const DEBUGDEBUGDEBUG loglevel 级别常量 PRINT const public const PRINTPRINTPRINT loglevel 仅用于输出，信息输出后不换行，file 和 syslog 不保存此级别信息 NOTSET const public const NOTSETNOTSETNOTSET loglevel 级别常量 loglevel Integer public static Integer loglevelloglevelloglevel 输出级别，用以过滤输出信息，缺省为 NOTSET，全部输出。信息过滤之后才会输出给 add 设定的各个设备。 colors readonly TextColor public static readonly TextColor colorscolorscolors 终端输出颜色配置对象，详见 TextColor width readonly Integer public static readonly Integer widthwidthwidth 查询终端每行字符数 height readonly Integer public static readonly Integer heightheightheight 查询终端行数 Method Detail add void add(Array cfg) 批量添加 console 输出系统，支持的设备为 console, syslog 和 file，最多可以添加 10 个输出 通过配置 console，可以将程序输出和系统错误发往不同设备，用于运行环境信息收集。 console.add([&amp;quot;console&amp;quot;, { type: &amp;quot;syslog&amp;quot;, levels: [console.INFO, console.ERROR] }]); Parameters cfg 输出配置数组 add void add(Value cfg) 添加 console 输出系统，支持的设备为 console, syslog 和 file，最多可以添加 10 个输出 通过配置 console，可以将程序输出和系统错误发往不同设备，用于运行环境信息收集。 cfg 为配置，可以为设备名称字符串： console.add(&amp;quot;console&amp;quot;); 也可以为一个设备配置对象： console.add({ type: &amp;quot;console&amp;quot;, levels: [console.INFO, console.ERROR] // 选项，省略则输出全部级别日志 }); syslog 仅在 posix 平台有效： console.add({ type: &amp;quot;syslog&amp;quot;, levels: [console.INFO, console.ERROR] }); file 日志不支持简单调用： console.add({ type: &amp;quot;file&amp;quot;, levels: [console.INFO, console.ERROR], path: &amp;quot;path/to/file&amp;quot;, // 必选项 split: &amp;quot;30m&amp;quot;, // 选项，可选值为 &amp;quot;day&amp;quot;, &amp;quot;hour&amp;quot;, &amp;quot;minute&amp;quot;, &amp;quot;###k&amp;quot;, &amp;quot;###m&amp;quot;, &amp;quot;###g&amp;quot; count: 10 // 选项，可选范围为 2-128，指定此项时必须提供 split }); Parameters cfg 输出配置 reset void reset() 初始化到缺省设置，只在 console 输出信息 log void log(String fmt,...) 记录普通日志信息，与 info 等同 记录一般等级的日志信息。通常用于输出非错误性提示信息。 Parameters fmt 格式化字符串 ... 可选参数列表 log void log(...) 记录普通日志信息，与 info 等同 记录一般等级的日志信息。通常用于输出非错误性提示信息。 Parameters ... 可选参数列表 debug void debug(String fmt,...) 记录调试日志信息 记录调试日志信息。通常用于输出调试信息。不重要。 Parameters fmt 格式化字符串 ... 可选参数列表 debug void debug(...) 记录调试日志信息 记录调试日志信息。通常用于输出调试信息。不重要。 Parameters ... 可选参数列表 info void info(String fmt,...) 记录普通日志信息，与 log 等同 记录一般等级的日志信息。通常用于输出非错误性提示信息。 Parameters fmt 格式化字符串 ... 可选参数列表 info void info(...) 记录普通日志信息，与 log 等同 记录一般等级的日志信息。通常用于输出非错误性提示信息。 Parameters ... 可选参数列表 notice void notice(String fmt,...) 记录警告日志信息 记录警告日志信息。通常用于输出提示性调试信息。一般重要。 Parameters fmt 格式化字符串 ... 可选参数列表 notice void notice(...) 记录警告日志信息 记录警告日志信息。通常用于输出提示性调试信息。一般重要。 Parameters ... 可选参数列表 warn void warn(String fmt,...) 记录警告日志信息 记录警告日志信息。通常用于输出警告性调试信息。重要。 Parameters fmt 格式化字符串 ... 可选参数列表 warn void warn(...) 记录警告日志信息 记录警告日志信息。通常用于输出警告性调试信息。重要。 Parameters ... 可选参数列表 error void error(String fmt,...) 记录错误日志信息 记录用于错误日志信息。通常用于输出错误信息。非常重要。系统的出错信息也会以此等级记录。 Parameters fmt 格式化字符串 ... 可选参数列表 error void error(...) 记录错误日志信息 记录用于错误日志信息。通常用于输出错误信息。非常重要。系统的出错信息也会以此等级记录。 Parameters ... 可选参数列表 crit void crit(String fmt,...) 记录关键错误日志信息 记录用于关键错误日志信息。通常用于输出关键错误信息。非常重要。 Parameters fmt 格式化字符串 ... 可选参数列表 crit void crit(...) 记录关键错误日志信息 记录用于关键错误日志信息。通常用于输出关键错误信息。非常重要。 Parameters ... 可选参数列表 alert void alert(String fmt,...) 记录警报错误日志信息 记录用于警报错误日志信息。通常用于输出警报错误信息。非常重要。为最高级别信息。 Parameters fmt 格式化字符串 ... 可选参数列表 alert void alert(...) 记录警报错误日志信息 记录用于警报错误日志信息。通常用于输出警报错误信息。非常重要。为最高级别信息。 Parameters ... 可选参数列表 dir void dir(Value obj) 用 JSON 格式输出对象 Parameters obj 给定要显示的对象 time void time(String label) 启动一个计时器 Parameters label 标题，缺省为空字符串。 timeEnd void timeEnd(String label) 统计指定计时器的数值 Parameters label 标题，缺省为空字符串。 trace void trace(String label) 输出当前调用堆栈 通过日志输出当前调用堆栈。 Parameters label 标题，缺省为空字符串。 assert void assert(Value value,String msg) 断言测试，如果测试值为假，则报错 Parameters value 测试的数值 msg 报错信息 print void print(String fmt,...) 向控制台输出格式化文本，输出内容不会记入日志系统，输出文本后不会自动换行，可连续输出 Parameters fmt 格式化字符串 ... 可选参数列表 print void print(...) 向控制台输出格式化文本，输出内容不会记入日志系统，输出文本后不会自动换行，可连续输出 Parameters ... 可选参数列表 moveTo void moveTo(Integer row,Integer column) 移动控制台光标到指定位置 Parameters row 指定新光标的行坐标 column 指定新光标的列坐标 hideCursor void hideCursor() 隐藏控制台光标 showCursor void showCursor() 显示控制台光标 clear void clear() 清除控制台 keyDown void keyDown(String key,String modifier) 按下一个按键 Parameters key 指定按键，单字符直接传入，功能键传入名称： 功能键：f1 - f12 方向键：up, down,left, right, home, end, pageup, pagedown 编辑键：backspace, delete, insert, enter, tab, escape, space 控制键：control, alt, shift, command modifier 指定控制键，可以为：control, alt, shift, command keyDown void keyDown(String key,Array modifier) 按下一个按键 Parameters key 指定按键，单字符直接传入，功能键传入名称： 功能键：f1 - f12 方向键：up, down,left, right, home, end, pageup, pagedown 编辑键：backspace, delete, insert, enter, tab, escape, space 控制键：control, alt, shift, command modifier 指定控制键数组，可以为：control, alt, shift, command keyUp void keyUp(String key,String modifier) 松开一个按键 Parameters key 指定按键，单字符直接传入，功能键传入名称： 功能键：f1 - f12 方向键：up, down,left, right, home, end, pageup, pagedown 编辑键：backspace, delete, insert, enter, tab, escape, space 控制键：control, alt, shift, command modifier 指定控制键，可以为：control, alt, shift, command keyUp void keyUp(String key,Array modifier) 松开一个按键 Parameters key 指定按键，单字符直接传入，功能键传入名称： 功能键：f1 - f12 方向键：up, down,left, right, home, end, pageup, pagedown 编辑键：backspace, delete, insert, enter, tab, escape, space 控制键：control, alt, shift, command modifier 指定控制键数组，可以为：control, alt, shift, command keyTap void keyTap(String key,String modifier) 点击并松开一个按键 Parameters key 指定按键，单字符直接传入，功能键传入名称： 功能键：f1 - f12 方向键：up, down,left, right, home, end, pageup, pagedown 编辑键：backspace, delete, insert, enter, tab, escape, space 控制键：control, alt, shift, command modifier 指定控制键，可以为：control, alt, shift, command keyTap void keyTap(String key,Array modifier) 点击并松开一个按键 Parameters key 指定按键，单字符直接传入，功能键传入名称： 功能键：f1 - f12 方向键：up, down,left, right, home, end, pageup, pagedown 编辑键：backspace, delete, insert, enter, tab, escape, space 控制键：control, alt, shift, command modifier 指定控制键数组，可以为：control, alt, shift, command typeString void typeString(String text) 输入一个字符串 Parameters text 指定输入的字符串 moveMouse void moveMouse(Integer x,Integer y) 移动鼠标到指定的位置 Parameters x 指定 x 坐标 y 指定 y 坐标 mouseUp void mouseUp(String button) 按下一个鼠标键 Parameters button 指定鼠标键名称，允许值为: left, right, moddle mouseDown void mouseDown(String button) 放开一个鼠标键 Parameters button 指定鼠标键名称，允许值为: left, right, moddle clickMouse void clickMouse(String button,Boolean dbclick) 点击一个鼠标键 Parameters button 指定鼠标键名称，允许值为: left, right, moddle dbclick 指定是否双击，缺省为 false readLine String readLine(String msg) 从控制台读取用户输入 Parameters msg 提示信息 Returns 返回用户输入的信息 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/coroutine/",
	"title": "coroutine",
	"tags": [],
	"description": "并发控制模块",
	"content": "并发控制模块 引用方法：var coroutine = require(&amp;lsquo;coroutine&amp;rsquo;); Field Summary Type Method and Description void public static static LockLockLock锁对象，参见 Lock void public static static SemaphoreSemaphoreSemaphore信号量对象，参见 Semaphore void public static static ConditionConditionCondition条件变量对象，参见 Condition void public static static EventEventEvent事件对象，参见 Event void public static static BlockQueueBlockQueueBlockQueue阻塞队列对象，参见 BlockQueue void public static static WorkerWorkerWorker独立线程工作对象，参见 Worker readonly Array public static readonly Array fibersfibersfibers返回当前正在运行的全部 fiber 数组 Integer public static Integer spareFibersspareFibersspareFibers查询和设置空闲 Fiber 数量，服务器抖动较大时可适度增加空闲 Fiber 数量。缺省为 256 readonly Integer public static readonly Integer vmidvmidvmid查询当前 vm 编号 Integer public static Integer loglevelloglevelloglevel修改和查询本 vm 的输出级别，用以过滤输出信息，缺省为 console.NOTSET，全部输出 Method Summary Type Method and Description Fiber start(Function func,...)启动一个纤程并返回纤程对象 Array parallel(Array funcs,Integer fibers)并行执行一组函数，并等待返回 Array parallel(Array datas,Function func,Integer fibers)并行执行一个函数处理一组数据，并等待返回 Array parallel(Function func,Integer num,Integer fibers)并行执行一个函数多次，并等待返回 Array parallel(...)并行执行一组函数，并等待返回 Fiber current()返回当前纤程 void sleep(Integer ms)暂停当前纤程指定的时间 Field Detail Lock void public static static LockLockLock 锁对象，参见 Lock Semaphore void public static static SemaphoreSemaphoreSemaphore 信号量对象，参见 Semaphore Condition void public static static ConditionConditionCondition 条件变量对象，参见 Condition Event void public static static EventEventEvent 事件对象，参见 Event BlockQueue void public static static BlockQueueBlockQueueBlockQueue 阻塞队列对象，参见 BlockQueue Worker void public static static WorkerWorkerWorker 独立线程工作对象，参见 Worker fibers readonly Array public static readonly Array fibersfibersfibers 返回当前正在运行的全部 fiber 数组 spareFibers Integer public static Integer spareFibersspareFibersspareFibers 查询和设置空闲 Fiber 数量，服务器抖动较大时可适度增加空闲 Fiber 数量。缺省为 256 vmid readonly Integer public static readonly Integer vmidvmidvmid 查询当前 vm 编号 loglevel Integer public static Integer loglevelloglevelloglevel 修改和查询本 vm 的输出级别，用以过滤输出信息，缺省为 console.NOTSET，全部输出 Method Detail start Fiber start(Function func,...) 启动一个纤程并返回纤程对象 Parameters func 制定纤程执行的函数 ... 可变参数序列，此序列会在纤程内传递给函数 Returns 返回纤程对象 parallel Array parallel(Array funcs,Integer fibers) 并行执行一组函数，并等待返回 Parameters funcs 并行执行的函数数组 fibers 限制并发 fiber 数量，缺省为 -1，启用与 funcs 数量相同 fiber Returns 返回函数执行结果的数组 parallel Array parallel(Array datas,Function func,Integer fibers) 并行执行一个函数处理一组数据，并等待返回 Parameters datas 并行执行的数据数组 func 并行执行的函数 fibers 限制并发 fiber 数量，缺省为 -1，启用与 datas 数量相同 fiber Returns 返回函数执行结果的数组 parallel Array parallel(Function func,Integer num,Integer fibers) 并行执行一个函数多次，并等待返回 Parameters func 并行执行的函数数 num 重复任务数量 fibers 限制并发 fiber 数量，缺省为 -1，启用与 funcs 数量相同 fiber Returns 返回函数执行结果的数组 parallel Array parallel(...) 并行执行一组函数，并等待返回 Parameters ... 一组并行执行的函数 Returns 返回函数执行结果的数组 current Fiber current() 返回当前纤程 Returns 当前纤程对象 sleep void sleep(Integer ms) 暂停当前纤程指定的时间 Parameters ms 指定要暂停的时间，以毫秒为单位，缺省为 0，即有空闲立即回恢复运行 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/crypto/",
	"title": "crypto",
	"tags": [],
	"description": "加密算法模块",
	"content": "加密算法模块 使用方法： var crypto = require(&#39;crypto&#39;); Field Summary Type Method and Description const public const AESAESAES指定对称加密算法 AES，支持 128, 192, 256 位 key，分组密码工作模式支持 ECB, CBC, CFB128, CTR, GCM const public const CAMELLIACAMELLIACAMELLIA指定对称加密算法 CAMELLIA，支持 128, 192, 256 位 key，分组密码工作模式支持 ECB, CBC, CFB128, CTR, GCM const public const DESDESDES指定对称加密算法 DES，支持 64 位 key，分组密码工作模式支持 ECB, CBC const public const DES_EDEDES_EDEDES_EDE指定对称加密算法 DES-EDE，支持 128 位 key，分组密码工作模式支持 ECB, CBC const public const DES_EDE3DES_EDE3DES_EDE3指定对称加密算法 DES-EDE3，支持 192 位 key，分组密码工作模式支持 ECB, CBC const public const BLOWFISHBLOWFISHBLOWFISH指定对称加密算法 BLOWFISH，支持 192 位 key，分组密码工作模式支持 ECB, CBC, CFB64, CTR const public const ARC4ARC4ARC4指定对称加密算法 ARC4，支持 40, 56, 64, 128 位 key const public const ECBECBECB指定分组密码工作模式支持 ECB const public const CBCCBCCBC指定分组密码工作模式支持 CBC const public const CFB64CFB64CFB64指定分组密码工作模式支持 CFB64 const public const CFB128CFB128CFB128指定分组密码工作模式支持 CFB128 const public const OFBOFBOFB指定分组密码工作模式支持 OFB const public const CTRCTRCTR指定分组密码工作模式支持 CTR const public const GCMGCMGCM指定分组密码工作模式支持 GCM const public const STREAMSTREAMSTREAM指定流密码模式 const public const CCMCCMCCM指定分组密码工作模式支持 CCM const public const PKCS7PKCS7PKCS7指定填充模式为 PKCS7 const public const ONE_AND_ZEROSONE_AND_ZEROSONE_AND_ZEROS指定填充模式为 ONE_AND_ZEROS const public const ZEROS_AND_LENZEROS_AND_LENZEROS_AND_LEN指定填充模式为 ZEROS_AND_LEN const public const ZEROSZEROSZEROS指定填充模式为 ZEROS const public const NOPADDINGNOPADDINGNOPADDING指定填充模式为 NOPADDING void public static static CipherCipherCipherCipher 构造函数，参见 Cipher void public static static PKeyPKeyPKeyPKey 构造函数，参见 PKey void public static static X509CertX509CertX509CertX509Cert 构造函数，参见 X509Cert void public static static X509CrlX509CrlX509CrlX509Crl 构造函数，参见 X509Crl void public static static X509ReqX509ReqX509ReqX509Req 构造函数，参见 X509Req Method Summary Type Method and Description PKey loadPKey(String filename,String password)加载一个 PEM/DER 格式的密钥文件 X509Cert loadCert(String filename)加载一个 CRT/PEM/DER/TXT 格式的证书，可多次调用 X509Crl loadCrl(String filename)加载一个 PEM/DER 格式的撤销证书，可多次调用 X509Req loadReq(String filename)加载一个 PEM/DER 格式的证书请求，可多次调用 Buffer randomBytes(Integer size)生成指定尺寸的随机数，使用 havege 生成器 Buffer simpleRandomBytes(Integer size)生成指定尺寸的低强度随机数，使用快速的算法 Buffer pseudoRandomBytes(Integer size)生成指定尺寸的伪随机数，使用 entropy 生成器 String randomArt(Buffer data,String title,Integer size)生成给定数据的可视化字符图像 Buffer pbkdf1(Buffer password,Buffer salt,Integer iterations,Integer size,Integer algo)依据 pbkdf1 根据明文 password 生成要求的二进制钥匙 Buffer pbkdf1(Buffer password,Buffer salt,Integer iterations,Integer size,String algoName)依据 pbkdf1 根据明文 password 生成要求的二进制钥匙 Buffer pbkdf2(Buffer password,Buffer salt,Integer iterations,Integer size,Integer algo)依据 rfc2898 根据明文 password 生成要求的二进制钥匙 Buffer pbkdf2(Buffer password,Buffer salt,Integer iterations,Integer size,String algoName)依据 rfc2898 根据明文 password 生成要求的二进制钥匙 Buffer pbkdf2Sync(Buffer password,Buffer salt,Integer iterations,Integer size,String algoName)依据 rfc2898 根据明文 password 生成要求的二进制钥匙，是 pbkdf2 的同步版兼容接口 Field Detail AES const public const AESAESAES 指定对称加密算法 AES，支持 128, 192, 256 位 key，分组密码工作模式支持 ECB, CBC, CFB128, CTR, GCM CAMELLIA const public const CAMELLIACAMELLIACAMELLIA 指定对称加密算法 CAMELLIA，支持 128, 192, 256 位 key，分组密码工作模式支持 ECB, CBC, CFB128, CTR, GCM DES const public const DESDESDES 指定对称加密算法 DES，支持 64 位 key，分组密码工作模式支持 ECB, CBC DES_EDE const public const DES_EDEDES_EDEDES_EDE 指定对称加密算法 DES-EDE，支持 128 位 key，分组密码工作模式支持 ECB, CBC DES_EDE3 const public const DES_EDE3DES_EDE3DES_EDE3 指定对称加密算法 DES-EDE3，支持 192 位 key，分组密码工作模式支持 ECB, CBC BLOWFISH const public const BLOWFISHBLOWFISHBLOWFISH 指定对称加密算法 BLOWFISH，支持 192 位 key，分组密码工作模式支持 ECB, CBC, CFB64, CTR ARC4 const public const ARC4ARC4ARC4 指定对称加密算法 ARC4，支持 40, 56, 64, 128 位 key ECB const public const ECBECBECB 指定分组密码工作模式支持 ECB CBC const public const CBCCBCCBC 指定分组密码工作模式支持 CBC CFB64 const public const CFB64CFB64CFB64 指定分组密码工作模式支持 CFB64 CFB128 const public const CFB128CFB128CFB128 指定分组密码工作模式支持 CFB128 OFB const public const OFBOFBOFB 指定分组密码工作模式支持 OFB CTR const public const CTRCTRCTR 指定分组密码工作模式支持 CTR GCM const public const GCMGCMGCM 指定分组密码工作模式支持 GCM STREAM const public const STREAMSTREAMSTREAM 指定流密码模式 CCM const public const CCMCCMCCM 指定分组密码工作模式支持 CCM PKCS7 const public const PKCS7PKCS7PKCS7 指定填充模式为 PKCS7 ONE_AND_ZEROS const public const ONE_AND_ZEROSONE_AND_ZEROSONE_AND_ZEROS 指定填充模式为 ONE_AND_ZEROS ZEROS_AND_LEN const public const ZEROS_AND_LENZEROS_AND_LENZEROS_AND_LEN 指定填充模式为 ZEROS_AND_LEN ZEROS const public const ZEROSZEROSZEROS 指定填充模式为 ZEROS NOPADDING const public const NOPADDINGNOPADDINGNOPADDING 指定填充模式为 NOPADDING Cipher void public static static CipherCipherCipher Cipher 构造函数，参见 Cipher PKey void public static static PKeyPKeyPKey PKey 构造函数，参见 PKey X509Cert void public static static X509CertX509CertX509Cert X509Cert 构造函数，参见 X509Cert X509Crl void public static static X509CrlX509CrlX509Crl X509Crl 构造函数，参见 X509Crl X509Req void public static static X509ReqX509ReqX509Req X509Req 构造函数，参见 X509Req Method Detail loadPKey PKey loadPKey(String filename,String password) 加载一个 PEM/DER 格式的密钥文件 Parameters filename 密钥文件名 password 解密密码 loadCert X509Cert loadCert(String filename) 加载一个 CRT/PEM/DER/TXT 格式的证书，可多次调用 loadFile 加载 mozilla 的 certdata,txt， 可于 http://hg.mozilla.org/releases/mozilla-release/raw-file/default/security/nss/lib/ckfw/builtins/certdata.txt 下载使用 Parameters filename 证书文件名 loadCrl X509Crl loadCrl(String filename) 加载一个 PEM/DER 格式的撤销证书，可多次调用 Parameters filename 撤销证书文件名 loadReq X509Req loadReq(String filename) 加载一个 PEM/DER 格式的证书请求，可多次调用 Parameters filename 证书请求文件名 randomBytes Buffer randomBytes(Integer size) 生成指定尺寸的随机数，使用 havege 生成器 Parameters size 指定生成的随机数尺寸 Returns 返回生成的随机数 simpleRandomBytes Buffer simpleRandomBytes(Integer size) 生成指定尺寸的低强度随机数，使用快速的算法 Parameters size 指定生成的随机数尺寸 Returns 返回生成的随机数 pseudoRandomBytes Buffer pseudoRandomBytes(Integer size) 生成指定尺寸的伪随机数，使用 entropy 生成器 Parameters size 指定生成的随机数尺寸 Returns 返回生成的随机数 randomArt String randomArt(Buffer data,String title,Integer size) 生成给定数据的可视化字符图像 Parameters data 指定要展示的数据 title 指定字符图像的标题，多字节字符会导致宽度错误 size 字符图像尺寸 Returns 返回生成的可视化字符串图像 pbkdf1 Buffer pbkdf1(Buffer password,Buffer salt,Integer iterations,Integer size,Integer algo) 依据 pbkdf1 根据明文 password 生成要求的二进制钥匙 Parameters password 指定使用的密码 salt 指定 hmac 使用的 salt iterations 指定迭代次数 size 指定钥匙尺寸 algo 指定要使用的 hash 算法，详见 hash 模块 Returns 返回生成的二进制钥匙 pbkdf1 Buffer pbkdf1(Buffer password,Buffer salt,Integer iterations,Integer size,String algoName) 依据 pbkdf1 根据明文 password 生成要求的二进制钥匙 Parameters password 指定使用的密码 salt 指定 hmac 使用的 salt iterations 指定迭代次数 size 指定钥匙尺寸 algoName 指定要使用的 hash 算法，详见 hash 模块 Returns 返回生成的二进制钥匙 pbkdf2 Buffer pbkdf2(Buffer password,Buffer salt,Integer iterations,Integer size,Integer algo) 依据 rfc2898 根据明文 password 生成要求的二进制钥匙 Parameters password 指定使用的密码 salt 指定 hmac 使用的 salt iterations 指定迭代次数 size 指定钥匙尺寸 algo 指定要使用的 hash 算法，详见 hash 模块 Returns 返回生成的二进制钥匙 pbkdf2 Buffer pbkdf2(Buffer password,Buffer salt,Integer iterations,Integer size,String algoName) 依据 rfc2898 根据明文 password 生成要求的二进制钥匙 Parameters password 指定使用的密码 salt 指定 hmac 使用的 salt iterations 指定迭代次数 size 指定钥匙尺寸 algoName 指定要使用的 hash 算法，详见 hash 模块 Returns 返回生成的二进制钥匙 pbkdf2Sync Buffer pbkdf2Sync(Buffer password,Buffer salt,Integer iterations,Integer size,String algoName) 依据 rfc2898 根据明文 password 生成要求的二进制钥匙，是 pbkdf2 的同步版兼容接口 Parameters password 指定使用的密码 salt 指定 hmac 使用的 salt iterations 指定迭代次数 size 指定钥匙尺寸 algoName 指定要使用的 hash 算法，详见 hash 模块 Returns 返回生成的二进制钥匙 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/db/",
	"title": "db",
	"tags": [],
	"description": "数据库访问模块",
	"content": "数据库访问模块 基础模块。可用于创建和操作数据库资源，引用方式： var db = require(&#39;db&#39;); Method Summary Type Method and Description object open(String connString)打开一个数据库，此方法为通用入口，根据提供的 connString 不同调用不同的引擎 MySQL openMySQL(String connString)打开一个 mysql 数据库 MSSQL openMSSQL(String connString)打开一个 mysql 数据库 SQLite openSQLite(String connString)打开一个 sqlite 数据库 MongoDB openMongoDB(String connString)打开一个 mongodb 数据库 LevelDB openLevelDB(String connString)打开一个 leveldb 数据库 Redis openRedis(String connString)打开一个 Redis 数据库 String format(String sql,...)格式化一个 sql 命令，并返回格式化结果 String formatMySQL(String sql,...)格式化一个 mysql 命令，并返回格式化结果 String formatMSSQL(String sql,...)格式化一个 mssql 命令，并返回格式化结果 String escape(String str,Boolean mysql)将字符串编码为 SQL 安全编码字符串 Method Detail open object open(String connString) 打开一个数据库，此方法为通用入口，根据提供的 connString 不同调用不同的引擎 Parameters connString 数据库描述，如：mysql://user:pass@host/db Returns 返回数据库连接对象 openMySQL MySQL openMySQL(String connString) 打开一个 mysql 数据库 Parameters connString 数据库描述，如：mysql://user:pass@host/db Returns 返回数据库连接对象 openMSSQL MSSQL openMSSQL(String connString) 打开一个 mysql 数据库 Parameters connString 数据库描述，如：mssql://user:pass@host/db Returns 返回数据库连接对象 openSQLite SQLite openSQLite(String connString) 打开一个 sqlite 数据库 Parameters connString 数据库描述，如：sqlite:test.db 或者 test.db Returns 返回数据库连接对象 openMongoDB MongoDB openMongoDB(String connString) 打开一个 mongodb 数据库 Parameters connString 数据库描述 Returns 返回数据库连接对象 openLevelDB LevelDB openLevelDB(String connString) 打开一个 leveldb 数据库 Parameters connString 数据库描述，如：level:test.db 或者 test.db Returns 返回数据库对象 openRedis Redis openRedis(String connString) 打开一个 Redis 数据库 Parameters connString 数据库描述，如：redis://server:port 或者 &amp;ldquo;server&amp;rdquo; Returns 返回数据库连接对象 format String format(String sql,...) 格式化一个 sql 命令，并返回格式化结果 Parameters sql 格式化字符串，可选参数用 ? 指定。例如：&amp;rsquo;SELECT FROM TEST WHERE [id]=?&amp;rsquo; ... 可选参数列表 Returns 返回格式化之后的 sql 命令 formatMySQL String formatMySQL(String sql,...) 格式化一个 mysql 命令，并返回格式化结果 Parameters sql 格式化字符串，可选参数用 ? 指定。例如：&amp;rsquo;SELECT FROM TEST WHERE [id]=?&amp;rsquo; ... 可选参数列表 Returns 返回格式化之后的 sql 命令 formatMSSQL String formatMSSQL(String sql,...) 格式化一个 mssql 命令，并返回格式化结果 Parameters sql 格式化字符串，可选参数用 ? 指定。例如：&amp;rsquo;SELECT FROM TEST WHERE [id]=?&amp;rsquo; ... 可选参数列表 Returns 返回格式化之后的 sql 命令 escape String escape(String str,Boolean mysql) 将字符串编码为 SQL 安全编码字符串 Parameters str 要编码的字符串 mysql 指定 mysql 编码，缺省为 false Returns 返回编码后的字符串 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/encoding/",
	"title": "encoding",
	"tags": [],
	"description": "编码与解码模块，用于处理不同的数据编码格式与二进制之间的转换 引用方式：",
	"content": "编码与解码模块，用于处理不同的数据编码格式与二进制之间的转换 引用方式： var encoding = require(&#39;encoding&#39;); Field Summary Type Method and Description void public static static base32base32base32base32 编码与解码模块 void public static static base64base64base64base64 编码与解码模块 void public static static base64vlqbase64vlqbase64vlqbase64vlq 编码与解码模块 void public static static hexhexhexhex 编码与解码模块 void public static static iconviconviconviconv 编码与解码模块 void public static static jsonjsonjsonjson 编码与解码模块 void public static static bsonbsonbsonbson 编码与解码模块 Method Summary Type Method and Description String jsstr(String str,Boolean json)将字符串编码为 javascript 转义字符串，用以在 javascript 代码中包含文本 String encodeURI(String url)url 字符串安全编码 String encodeURIComponent(String url)url 部件字符串安全编码 String decodeURI(String url)url 安全字符串解码 Field Detail base32 void public static static base32base32base32 base32 编码与解码模块 base64 void public static static base64base64base64 base64 编码与解码模块 base64vlq void public static static base64vlqbase64vlqbase64vlq base64vlq 编码与解码模块 hex void public static static hexhexhex hex 编码与解码模块 iconv void public static static iconviconviconv iconv 编码与解码模块 json void public static static jsonjsonjson json 编码与解码模块 bson void public static static bsonbsonbson bson 编码与解码模块 Method Detail jsstr String jsstr(String str,Boolean json) 将字符串编码为 javascript 转义字符串，用以在 javascript 代码中包含文本 Parameters str 要编码的字符串 json 是否生成json兼容字符串 Returns 返回编码的字符串 encodeURI String encodeURI(String url) url 字符串安全编码 Parameters url 要编码的 url Returns 返回编码的字符串 encodeURIComponent String encodeURIComponent(String url) url 部件字符串安全编码 Parameters url 要编码的 url Returns 返回编码的字符串 decodeURI String decodeURI(String url) url 安全字符串解码 Parameters url 要解码的 url Returns 返回解码的字符串 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/fs/",
	"title": "fs",
	"tags": [],
	"description": "文件系统处理模块",
	"content": "文件系统处理模块 使用方法： var fs = require(&#39;fs&#39;); Field Summary Type Method and Description const public const SEEK_SETSEEK_SETSEEK_SETseek 方式常量，移动到绝对位置 const public const SEEK_CURSEEK_CURSEEK_CURseek 方式常量，移动到当前位置的相对位置 const public const SEEK_ENDSEEK_ENDSEEK_ENDseek 方式常量，移动到文件结尾的相对位置 Method Summary Type Method and Description Boolean exists(String path)查询指定的文件或目录是否存在 Boolean existsSync(String path)查询指定的文件或目录是否存在，是 exists 的同步版兼容接口 void unlink(String path)删除指定的文件 void unlinkSync(String path)删除指定的文件，是 unlink 的同步版兼容接口 void mkdir(String path,Integer mode)创建一个目录 void mkdirSync(String path,Integer mode)创建一个目录，是 mkdir 的同步版兼容接口 void rmdir(String path)删除一个目录 void rmdirSync(String path)删除一个目录，是 rmdir 的同步版兼容接口 void rename(String from,String to)重新命名一个文件 void renameSync(String from,String to)重新命名一个文件，是 rename 的同步版兼容接口 void copy(String from,String to)复制一个文件 void chmod(String path,Integer mode)设置指定文件的访问权限，Windows 不支持此方法 void chmodSync(String path,Integer mode)设置指定文件的访问权限，是 chmod 的同步版兼容接口 Stat stat(String path)查询指定文件的基础信息 Stat statSync(String path)查询指定文件的基础信息，是 stat 的同步版兼容接口 List readdir(String path)读取指定目录的文件信息 List readdirSync(String path)读取指定目录的文件信息，是 readdir 的同步版兼容接口 SeekableStream open(String fname,String flags)打开文件，用于读取，写入，或者同时读写 SeekableStream openSync(String fname,String flags)打开文件，用于读取，写入，或者同时读写，是 open 的同步版兼容接口 BufferedStream openTextStream(String fname,String flags)打开文本文件，用于读取，写入，或者同时读写 String readTextFile(String fname)打开文本文件，并读取内容 Buffer readFile(String fname)打开二进制文件，并读取内容 Buffer readFileSync(String fname)打开二进制文件，并读取内容，是 readFile 的同步版兼容接口 Array readLines(String fname,Integer maxlines)打开文件，以数组方式读取一组文本行，行结尾标识基于 EOL 属性的设置，缺省时，posix:&amp;rdquo;\n&amp;rdquo;；windows:&amp;rdquo;\r\n&amp;rdquo; void writeTextFile(String fname,String txt)创建文本文件，并写入内容 void writeFile(String fname,Buffer data)创建二进制文件，并写入内容 void writeFileSync(String fname,Buffer data)创建二进制文件，并写入内容，是 writeFile 的同步版兼容接口 Field Detail SEEK_SET const public const SEEK_SETSEEK_SETSEEK_SET seek 方式常量，移动到绝对位置 SEEK_CUR const public const SEEK_CURSEEK_CURSEEK_CUR seek 方式常量，移动到当前位置的相对位置 SEEK_END const public const SEEK_ENDSEEK_ENDSEEK_END seek 方式常量，移动到文件结尾的相对位置 Method Detail exists Boolean exists(String path) 查询指定的文件或目录是否存在 Parameters path 指定要查询的路径 Returns 返回 True 表示文件或目录存在 existsSync Boolean existsSync(String path) 查询指定的文件或目录是否存在，是 exists 的同步版兼容接口 Parameters path 指定要查询的路径 Returns 返回 True 表示文件或目录存在 unlink void unlink(String path) 删除指定的文件 Parameters path 指定要删除的路径 unlinkSync void unlinkSync(String path) 删除指定的文件，是 unlink 的同步版兼容接口 Parameters path 指定要删除的路径 mkdir void mkdir(String path,Integer mode) 创建一个目录 Parameters path 指定要创建的目录名 mode 指定文件权限，Windows 忽略此参数 mkdirSync void mkdirSync(String path,Integer mode) 创建一个目录，是 mkdir 的同步版兼容接口 Parameters path 指定要创建的目录名 mode 指定文件权限，Windows 忽略此参数 rmdir void rmdir(String path) 删除一个目录 Parameters path 指定要删除的目录名 rmdirSync void rmdirSync(String path) 删除一个目录，是 rmdir 的同步版兼容接口 Parameters path 指定要删除的目录名 rename void rename(String from,String to) 重新命名一个文件 Parameters from 指定更名的文件 to 指定要修改的新文件名 renameSync void renameSync(String from,String to) 重新命名一个文件，是 rename 的同步版兼容接口 Parameters from 指定更名的文件 to 指定要修改的新文件名 copy void copy(String from,String to) 复制一个文件 Parameters from 指定更名的文件 to 指定要修改的新文件名 chmod void chmod(String path,Integer mode) 设置指定文件的访问权限，Windows 不支持此方法 Parameters path 指定操作的文件 mode 指定设定的访问权限 chmodSync void chmodSync(String path,Integer mode) 设置指定文件的访问权限，是 chmod 的同步版兼容接口 Parameters path 指定操作的文件 mode 指定设定的访问权限 stat Stat stat(String path) 查询指定文件的基础信息 Parameters path 指定查询的文件 Returns 返回文件的基础信息 statSync Stat statSync(String path) 查询指定文件的基础信息，是 stat 的同步版兼容接口 Parameters path 指定查询的文件 Returns 返回文件的基础信息 readdir List readdir(String path) 读取指定目录的文件信息 Parameters path 指定查询的目录 Returns 返回目录的文件信息数组 readdirSync List readdirSync(String path) 读取指定目录的文件信息，是 readdir 的同步版兼容接口 Parameters path 指定查询的目录 Returns 返回目录的文件信息数组 open SeekableStream open(String fname,String flags) 打开文件，用于读取，写入，或者同时读写 Parameters fname 指定文件名 flags 指定文件打开方式，缺省为 &amp;ldquo;r&amp;rdquo;，只读方式。支持的方式如下： &amp;lsquo;r&amp;rsquo; 只读方式，文件不存在则抛出错误。 &amp;lsquo;r+&amp;rsquo; 读写方式，文件不存在则抛出错误。 &amp;lsquo;w&amp;rsquo; 只写方式，文件不存在则自动创建，存在则将被清空。 &amp;lsquo;w+&amp;rsquo; 读写方式，文件不存在则自动创建。 &amp;lsquo;a&amp;rsquo; 只写添加方式，文件不存在则自动创建。 &amp;lsquo;a+&amp;rsquo; 读写添加方式，文件不存在则自动创建。 Returns 返回打开的文件对象 openSync SeekableStream openSync(String fname,String flags) 打开文件，用于读取，写入，或者同时读写，是 open 的同步版兼容接口 Parameters fname 指定文件名 flags 指定文件打开方式，缺省为 &amp;ldquo;r&amp;rdquo;，只读方式。支持的方式如下： &amp;lsquo;r&amp;rsquo; 只读方式，文件不存在则抛出错误。 &amp;lsquo;r+&amp;rsquo; 读写方式，文件不存在则抛出错误。 &amp;lsquo;w&amp;rsquo; 只写方式，文件不存在则自动创建，存在则将被清空。 &amp;lsquo;w+&amp;rsquo; 读写方式，文件不存在则自动创建。 &amp;lsquo;a&amp;rsquo; 只写添加方式，文件不存在则自动创建。 &amp;lsquo;a+&amp;rsquo; 读写添加方式，文件不存在则自动创建。 Returns 返回打开的文件对象 openTextStream BufferedStream openTextStream(String fname,String flags) 打开文本文件，用于读取，写入，或者同时读写 Parameters fname 指定文件名 flags 指定文件打开方式，缺省为 &amp;ldquo;r&amp;rdquo;，只读方式。支持的方式如下： &amp;lsquo;r&amp;rsquo; 只读方式，文件不存在则抛出错误。 &amp;lsquo;r+&amp;rsquo; 读写方式，文件不存在则抛出错误。 &amp;lsquo;w&amp;rsquo; 只写方式，文件不存在则自动创建，存在则将被清空。 &amp;lsquo;w+&amp;rsquo; 读写方式，文件不存在则自动创建。 &amp;lsquo;a&amp;rsquo; 只写添加方式，文件不存在则自动创建。 &amp;lsquo;a+&amp;rsquo; 读写添加方式，文件不存在则自动创建。 Returns 返回打开的文件对象 readTextFile String readTextFile(String fname) 打开文本文件，并读取内容 Parameters fname 指定文件名 Returns 返回文件文本内容 readFile Buffer readFile(String fname) 打开二进制文件，并读取内容 Parameters fname 指定文件名 Returns 返回文件文本内容 readFileSync Buffer readFileSync(String fname) 打开二进制文件，并读取内容，是 readFile 的同步版兼容接口 Parameters fname 指定文件名 Returns 返回文件文本内容 readLines Array readLines(String fname,Integer maxlines) 打开文件，以数组方式读取一组文本行，行结尾标识基于 EOL 属性的设置，缺省时，posix:&amp;rdquo;\n&amp;rdquo;；windows:&amp;rdquo;\r\n&amp;rdquo; Parameters fname 指定文件名 maxlines 指定此次读取的最大行数，缺省读取全部文本行 Returns 返回读取的文本行数组，若无数据可读，或者连接中断，空数组 writeTextFile void writeTextFile(String fname,String txt) 创建文本文件，并写入内容 Parameters fname 指定文件名 txt 指定要写入的字符串 writeFile void writeFile(String fname,Buffer data) 创建二进制文件，并写入内容 Parameters fname 指定文件名 data 指定要写入的二进制数据 writeFileSync void writeFileSync(String fname,Buffer data) 创建二进制文件，并写入内容，是 writeFile 的同步版兼容接口 Parameters fname 指定文件名 data 指定要写入的二进制数据 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/gd/",
	"title": "gd",
	"tags": [],
	"description": "图像文件处理模块",
	"content": "图像文件处理模块 基础模块。可用于创建和操作图像文件，引用方式： var gd = require(&#39;gd&#39;); Field Summary Type Method and Description const public const NONENONENONE图像格式常量，标示当前图像来源为未知 const public const JPEGJPEGJPEG图像格式常量，标示当前图像来源为 jpeg 格式数据 const public const GIFGIFGIF图像格式常量，标示当前图像来源为 gif 格式数据 const public const PNGPNGPNG图像格式常量，标示当前图像来源为 png 格式数据 const public const TIFFTIFFTIFF图像格式常量，标示当前图像来源为 tiff 格式数据 const public const BMPBMPBMP图像格式常量，标示当前图像来源为 bmp 格式数据 const public const WEBPWEBPWEBP图像格式常量，标示当前图像来源为 webp 格式数据 const public const TRUECOLORTRUECOLORTRUECOLOR图像类型常量，标示当前图像为真彩色图像 const public const PALETTEPALETTEPALETTE图像类型常量，标示当前图像为调色板图像 const public const ARCARCARC扇形绘制样式，绘制一条连接开始和结束点的圆弧 const public const CHORDCHORDCHORD扇形绘制样式，绘制一条连接原点，开始和结束点的直线 const public const NOFILLNOFILLNOFILL扇形绘制样式，绘制不填充的扇形 const public const EDGEDEDGEDEDGED扇形绘制样式，绘制一条连接起点和终点的弧和连接原点的直线 const public const HORIZONTALHORIZONTALHORIZONTAL镜像方向，横向做镜像处理 const public const VERTICALVERTICALVERTICAL镜像方向，纵向做镜像处理 const public const BOTHBOTHBOTH镜像方向，横向和纵向都做镜像处理 const public const LEFTLEFTLEFT旋转方向，向左旋转 const public const RIGHTRIGHTRIGHT旋转方向，向右旋转 const public const MEAN_REMOVALMEAN_REMOVALMEAN_REMOVAL滤波器类型：用平均移除法来达到轮廓效果 const public const EDGEDETECTEDGEDETECTEDGEDETECT滤波器类型：用边缘检测来突出图像的边缘 const public const EMBOSSEMBOSSEMBOSS滤波器类型：使图像浮雕化 const public const SELECTIVE_BLURSELECTIVE_BLURSELECTIVE_BLUR滤波器类型：模糊图像 const public const GAUSSIAN_BLURGAUSSIAN_BLURGAUSSIAN_BLUR滤波器类型：用高斯算法模糊图像 const public const NEGATENEGATENEGATE滤波器类型：将图像中所有颜色反转 const public const GRAYSCALEGRAYSCALEGRAYSCALE滤波器类型：将图像转换为灰度图 const public const SMOOTHSMOOTHSMOOTH滤波器类型：使图像更柔滑，用arg1设定柔滑级别 const public const BRIGHTNESSBRIGHTNESSBRIGHTNESS滤波器类型：改变图像的亮度，用arg1设定亮度级别，取值范围是-255~255 const public const CONTRASTCONTRASTCONTRAST滤波器类型：改变图像的对比度，用arg1设定对比度级别，取值范围是0~100 const public const COLORIZECOLORIZECOLORIZE滤波器类型：改变图像的色调，用arg1、arg2、arg3分别指定red、blue、green，每种颜色范围是0~255，arg4为透明度，取值返回是0~127 Method Summary Type Method and Description Image create(Integer width,Integer height,Integer color)创建一个新图像 Image load(Buffer data)从格式数据中解码图像 Image load(SeekableStream stm)从流对象中解码图像 Image load(String fname)从指定文件中解码图像 Integer rgb(Integer red,Integer green,Integer blue)通过 rgb 颜色分量生成组合颜色 Integer rgba(Integer red,Integer green,Integer blue,Number alpha)通过 rgba 颜色分量生成组合颜色 Integer hsl(Number hue,Number saturation,Number lightness)通过 hsl 颜色分量生成组合颜色 Integer hsla(Number hue,Number saturation,Number lightness,Number alpha)通过 hsla 颜色分量生成组合颜色 Integer hsb(Number hue,Number saturation,Number brightness)通过 hsb 颜色分量生成组合颜色 Integer hsba(Number hue,Number saturation,Number brightness,Number alpha)通过 hsba 颜色分量生成组合颜色 Integer color(String color)通过字符串生成组合颜色 Field Detail NONE const public const NONENONENONE 图像格式常量，标示当前图像来源为未知 JPEG const public const JPEGJPEGJPEG 图像格式常量，标示当前图像来源为 jpeg 格式数据 GIF const public const GIFGIFGIF 图像格式常量，标示当前图像来源为 gif 格式数据 PNG const public const PNGPNGPNG 图像格式常量，标示当前图像来源为 png 格式数据 TIFF const public const TIFFTIFFTIFF 图像格式常量，标示当前图像来源为 tiff 格式数据 BMP const public const BMPBMPBMP 图像格式常量，标示当前图像来源为 bmp 格式数据 WEBP const public const WEBPWEBPWEBP 图像格式常量，标示当前图像来源为 webp 格式数据 TRUECOLOR const public const TRUECOLORTRUECOLORTRUECOLOR 图像类型常量，标示当前图像为真彩色图像 PALETTE const public const PALETTEPALETTEPALETTE 图像类型常量，标示当前图像为调色板图像 ARC const public const ARCARCARC 扇形绘制样式，绘制一条连接开始和结束点的圆弧 CHORD const public const CHORDCHORDCHORD 扇形绘制样式，绘制一条连接原点，开始和结束点的直线 NOFILL const public const NOFILLNOFILLNOFILL 扇形绘制样式，绘制不填充的扇形 EDGED const public const EDGEDEDGEDEDGED 扇形绘制样式，绘制一条连接起点和终点的弧和连接原点的直线 HORIZONTAL const public const HORIZONTALHORIZONTALHORIZONTAL 镜像方向，横向做镜像处理 VERTICAL const public const VERTICALVERTICALVERTICAL 镜像方向，纵向做镜像处理 BOTH const public const BOTHBOTHBOTH 镜像方向，横向和纵向都做镜像处理 LEFT const public const LEFTLEFTLEFT 旋转方向，向左旋转 RIGHT const public const RIGHTRIGHTRIGHT 旋转方向，向右旋转 MEAN_REMOVAL const public const MEAN_REMOVALMEAN_REMOVALMEAN_REMOVAL 滤波器类型：用平均移除法来达到轮廓效果 EDGEDETECT const public const EDGEDETECTEDGEDETECTEDGEDETECT 滤波器类型：用边缘检测来突出图像的边缘 EMBOSS const public const EMBOSSEMBOSSEMBOSS 滤波器类型：使图像浮雕化 SELECTIVE_BLUR const public const SELECTIVE_BLURSELECTIVE_BLURSELECTIVE_BLUR 滤波器类型：模糊图像 GAUSSIAN_BLUR const public const GAUSSIAN_BLURGAUSSIAN_BLURGAUSSIAN_BLUR 滤波器类型：用高斯算法模糊图像 NEGATE const public const NEGATENEGATENEGATE 滤波器类型：将图像中所有颜色反转 GRAYSCALE const public const GRAYSCALEGRAYSCALEGRAYSCALE 滤波器类型：将图像转换为灰度图 SMOOTH const public const SMOOTHSMOOTHSMOOTH 滤波器类型：使图像更柔滑，用arg1设定柔滑级别 BRIGHTNESS const public const BRIGHTNESSBRIGHTNESSBRIGHTNESS 滤波器类型：改变图像的亮度，用arg1设定亮度级别，取值范围是-255~255 CONTRAST const public const CONTRASTCONTRASTCONTRAST 滤波器类型：改变图像的对比度，用arg1设定对比度级别，取值范围是0~100 COLORIZE const public const COLORIZECOLORIZECOLORIZE 滤波器类型：改变图像的色调，用arg1、arg2、arg3分别指定red、blue、green，每种颜色范围是0~255，arg4为透明度，取值返回是0~127 Method Detail create Image create(Integer width,Integer height,Integer color) 创建一个新图像 Parameters width 指定图像宽度 height 指定图像高度 color 指定图像类型，允许值为 gd.TRUECOLOR 或 gd.PALETTE Returns 返回创建成功的图像对象 load Image load(Buffer data) 从格式数据中解码图像 Parameters data 给定解码的图像数据 Returns 返回解码成功的图像对象 load Image load(SeekableStream stm) 从流对象中解码图像 Parameters stm 给定图像数据所在的流对象 Returns 返回解码成功的图像对象 load Image load(String fname) 从指定文件中解码图像 Parameters fname 指定文件名 Returns 返回解码成功的图像对象 rgb Integer rgb(Integer red,Integer green,Integer blue) 通过 rgb 颜色分量生成组合颜色 Parameters red 红色分量，范围为 0-255 green 绿色分量，范围为 0-255 blue 蓝色分量，范围为 0-255 Returns 返回组合颜色 rgba Integer rgba(Integer red,Integer green,Integer blue,Number alpha) 通过 rgba 颜色分量生成组合颜色 Parameters red 红色分量，范围为 0-255 green 绿色分量，范围为 0-255 blue 蓝色分量，范围为 0-255 alpha 透明分量，范围为 0.0-1.0 Returns 返回组合颜色 hsl Integer hsl(Number hue,Number saturation,Number lightness) 通过 hsl 颜色分量生成组合颜色 Parameters hue 色相分量，范围为 0-360 saturation 饱和度分量，范围为 0.0-1.0 lightness 亮度分量，范围为 0.0-1.0 Returns 返回组合颜色 hsla Integer hsla(Number hue,Number saturation,Number lightness,Number alpha) 通过 hsla 颜色分量生成组合颜色 Parameters hue 色相分量，范围为 0-360 saturation 饱和度分量，范围为 0.0-1.0 lightness 亮度分量，范围为 0.0-1.0 alpha 透明分量，范围为 0.0-1.0 Returns 返回组合颜色 hsb Integer hsb(Number hue,Number saturation,Number brightness) 通过 hsb 颜色分量生成组合颜色 Parameters hue 色相分量，范围为 0-360 saturation 饱和度分量，范围为 0.0-1.0 brightness 明亮程度分量，范围为 0.0-1.0 Returns 返回组合颜色 hsba Integer hsba(Number hue,Number saturation,Number brightness,Number alpha) 通过 hsba 颜色分量生成组合颜色 Parameters hue 色相分量，范围为 0-360 saturation 饱和度分量，范围为 0.0-1.0 brightness 明亮程度分量，范围为 0.0-1.0 alpha 透明分量，范围为 0.0-1.0 Returns 返回组合颜色 color Integer color(String color) 通过字符串生成组合颜色 Parameters color 指定颜色的字符串，如：&amp;rdquo;#ff0000&amp;rdquo;, &amp;ldquo;ff0000&amp;rdquo;, &amp;ldquo;#f00&amp;rdquo;, &amp;ldquo;f00&amp;rdquo; Returns 返回组合颜色 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/global/",
	"title": "global",
	"tags": [],
	"description": "全局对象，所有脚本均可以访问的基础对象",
	"content": "全局对象，所有脚本均可以访问的基础对象 Field Summary Type Method and Description void public static static BufferBufferBuffer二进制数据缓存对象，用于 io 读写的数据处理，参见 Buffer 对象。 void public static static Int64Int64Int6464位整数对象，参见 Int64 对象。 void public static static consoleconsoleconsole控制台访问对象 void public static static processprocessprocess控制台访问对象 readonly Worker public static readonly Worker MasterMasterMasterWorker 宿主对象，仅在 Worker 入口脚本有效 readonly Object public static readonly Object globalglobalglobal全局对象 readonly Array public static readonly Array argvargvargv获取当前脚本的运行参数，启动 js 获取进程启动参数，run 执行的脚本获取传递的参数 readonly String public static readonly String __filename__filename__filename当前脚本文件名 readonly String public static readonly String __dirname__dirname__dirname当前脚本所在目录 Method Summary Type Method and Description void run(String fname,Array argv)运行一个脚本 void clearInterval(Timer t)清除指定的定时器 void clearTimeout(Timer t)清除指定的定时器 void clearImmediate(Timer t)清除指定的定时器 Timer setInterval(Function callback,Integer timeout)每间隔指定的时间后调用函数 Timer setTimeout(Function callback,Integer timeout)在指定的时间后调用函数 Timer setImmediate(Function callback)下一个空闲时间立即执行回调函数 Value require(String id)加载一个模块并返回模块对象，更多信息参阅 模块管理 void GC()强制要求进行垃圾回收 Function sync(Function func)包裹 callback 方法为同步调用 void repl(Array cmds)进入交互模式，可以交互执行内部命令和代码，仅在启动 js 可以引用 void repl(Stream out,Array cmds)进入交互模式，可以交互执行内部命令和代码，仅在启动 js 可以引用 Field Detail Buffer void public static static BufferBufferBuffer 二进制数据缓存对象，用于 io 读写的数据处理，参见 Buffer 对象。 Int64 void public static static Int64Int64Int64 64位整数对象，参见 Int64 对象。 console void public static static consoleconsoleconsole 控制台访问对象 process void public static static processprocessprocess 控制台访问对象 Master readonly Worker public static readonly Worker MasterMasterMaster Worker 宿主对象，仅在 Worker 入口脚本有效 global readonly Object public static readonly Object globalglobalglobal 全局对象 argv readonly Array public static readonly Array argvargvargv 获取当前脚本的运行参数，启动 js 获取进程启动参数，run 执行的脚本获取传递的参数 __filename readonly String public static readonly String __filename__filename__filename 当前脚本文件名 __dirname readonly String public static readonly String __dirname__dirname__dirname 当前脚本所在目录 Method Detail run void run(String fname,Array argv) 运行一个脚本 Parameters fname 指定要运行的脚本路径 argv 指定要运行的参数，此参数可在脚本内使用 argv 获取 clearInterval void clearInterval(Timer t) 清除指定的定时器 Parameters t 指定要清除的定时器 clearTimeout void clearTimeout(Timer t) 清除指定的定时器 Parameters t 指定要清除的定时器 clearImmediate void clearImmediate(Timer t) 清除指定的定时器 Parameters t 指定要清除的定时器 setInterval Timer setInterval(Function callback,Integer timeout) 每间隔指定的时间后调用函数 Parameters callback 指定回调函数 timeout 指定间隔的时间，以毫秒为单位 Returns 返回定时器对象 setTimeout Timer setTimeout(Function callback,Integer timeout) 在指定的时间后调用函数 Parameters callback 指定回调函数 timeout 指定延时的时间，以毫秒为单位 Returns 返回定时器对象 setImmediate Timer setImmediate(Function callback) 下一个空闲时间立即执行回调函数 Parameters callback 指定回调函数 Returns 返回定时器对象 require Value require(String id) 加载一个模块并返回模块对象，更多信息参阅 模块管理 require 可用于加载基础模块，文件模块。 基础模块是沙箱创建时初始化的模块，引用时只需传递相应的 id，比如 require(&amp;ldquo;net&amp;rdquo;)。 文件模块是用户自定义模块，引用时需传递以 ./ 或 ../ 开头的相对路径。文件模块支持 .js 和 .json 文件。 文件模块也支持 package.json 格式，当模块为目录结构时，require 会先查询 package.json 中的 main，未发现则尝试加载路径下的 index.js 或 index.json。 若引用路径不是 ./ 或 ../ 开头，并且非基础模块，require 则先在启动路径查找，然后从当前模块所在路径下的 .modules 查找，并上级目录递归。 Parameters id 指定要加载的模块名称 Returns 返回加载模块的引出对象 GC void GC() 强制要求进行垃圾回收 sync Function sync(Function func) 包裹 callback 方法为同步调用 Parameters func 给定需要包裹的方法 Returns 返回同步运行的方法 repl void repl(Array cmds) 进入交互模式，可以交互执行内部命令和代码，仅在启动 js 可以引用 Parameters cmds 补充命令，格式如下： js [ { cmd: &amp;quot;.test&amp;quot;, help: &amp;quot;this is a test&amp;quot;, exec: function(argv) { console.log(argv); } }, { cmd: &amp;quot;.test1&amp;quot;, help: &amp;quot;this is an other test&amp;quot;, exec: function(argv) { console.log(argv); } } ] repl void repl(Stream out,Array cmds) 进入交互模式，可以交互执行内部命令和代码，仅在启动 js 可以引用 同一时刻只允许一个 Stream repl，新建一个 Stream repl 时，前一个 repl 将被关闭。 Parameters out 输入输出流对象，通常为网络连接 cmds 补充命令，格式如下： [ { cmd: &amp;quot;.test&amp;quot;, help: &amp;quot;this is a test&amp;quot;, exec: function(argv) { console.log(argv); } }, { cmd: &amp;quot;.test1&amp;quot;, help: &amp;quot;this is an other test&amp;quot;, exec: function(argv) { console.log(argv); } } ] td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/gui/",
	"title": "gui",
	"tags": [],
	"description": "输入输出处理模块",
	"content": "输入输出处理模块 使用方法： var gui = require(&#39;gui&#39;); Field Summary Type Method and Description const public const IE7IE7IE7WebView ie 模拟版本，指定 ie7 const public const IE8IE8IE8WebView ie 模拟版本，指定 ie8 const public const IE9IE9IE9WebView ie 模拟版本，指定 ie9 const public const IE10IE10IE10WebView ie 模拟版本，指定 ie10 const public const IE11IE11IE11WebView ie 模拟版本，指定 ie11 const public const EDGEEDGEEDGEWebView ie 模拟版本，指定 edge Method Summary Type Method and Description void setVersion(Integer ver) WebView open(String url)打开一个窗口并访问指定网址 WebView open(String url,Map opt)打开一个窗口并访问指定网址 Field Detail IE7 const public const IE7IE7IE7 WebView ie 模拟版本，指定 ie7 IE8 const public const IE8IE8IE8 WebView ie 模拟版本，指定 ie8 IE9 const public const IE9IE9IE9 WebView ie 模拟版本，指定 ie9 IE10 const public const IE10IE10IE10 WebView ie 模拟版本，指定 ie10 IE11 const public const IE11IE11IE11 WebView ie 模拟版本，指定 ie11 EDGE const public const EDGEEDGEEDGE WebView ie 模拟版本，指定 edge Method Detail setVersion void setVersion(Integer ver) open WebView open(String url) 打开一个窗口并访问指定网址 Parameters url 指定的网址，，可以使用 fs:path 访问本地文件系统 Returns 返回打开的窗口对象 open WebView open(String url,Map opt) 打开一个窗口并访问指定网址 Parameters url 指定的网址，，可以使用 fs:path 访问本地文件系统 opt 打开窗口参数，支持以下参数: { &amp;quot;left&amp;quot;: 100, // 窗口左上角 x，缺省系统自动设定 &amp;quot;right&amp;quot;: 100, // 窗口左上角 y，缺省系统自动设定 &amp;quot;width&amp;quot;: 100, // 窗口宽度，缺省系统自动设定 &amp;quot;height&amp;quot;: 100, // 窗口高度，缺省系统自动设定 &amp;quot;border&amp;quot;: true, // 是否有边框，缺省有边框 &amp;quot;caption&amp;quot;: true, // 是否有标题栏，缺省有标题栏 &amp;quot;resizable&amp;quot;: true, // 是否可改变尺寸，缺省可以改变 &amp;quot;maximize&amp;quot;: false, // 是否最大化显示，缺省不最大化 &amp;quot;visible&amp;quot;: true, // 是否显示，缺省显示 &amp;quot;debug&amp;quot;: false // 是否提示页面错误，缺省不提示 } 当设定 width 和 height，而未设定 left 或 right 时，窗口将自动居中 Returns 返回打开的窗口对象 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/hash/",
	"title": "hash",
	"tags": [],
	"description": "信息摘要计算模块，可用于计算信息摘要和摘要签名",
	"content": "信息摘要计算模块，可用于计算信息摘要和摘要签名 Field Summary Type Method and Description const public const MD2MD2MD2MD2 信息摘要算法标识常量 const public const MD4MD4MD4MD4 信息摘要算法标识常量 const public const MD5MD5MD5MD5 信息摘要算法标识常量 const public const SHA1SHA1SHA1SHA1 信息摘要算法标识常量 const public const SHA224SHA224SHA224SHA224 信息摘要算法标识常量 const public const SHA256SHA256SHA256SHA256 信息摘要算法标识常量 const public const SHA384SHA384SHA384SHA384 信息摘要算法标识常量 const public const SHA512SHA512SHA512SHA512 信息摘要算法标识常量 const public const RIPEMD160RIPEMD160RIPEMD160RIPEMD160 信息摘要算法标识常量 Method Summary Type Method and Description Digest digest(Integer algo,Buffer data)根据指定的算法标识创建一个信息摘要运算对象 Digest digest(Integer algo)根据指定的算法标识创建一个信息摘要运算对象 Digest md2(Buffer data)创建一个 MD2 信息摘要运算对象 Digest md4(Buffer data)创建一个 MD4 信息摘要运算对象 Digest md5(Buffer data)创建一个 MD5 信息摘要运算对象 Digest sha1(Buffer data)创建一个 SHA1 信息摘要运算对象 Digest sha224(Buffer data)创建一个 SHA224 信息摘要运算对象 Digest sha256(Buffer data)创建一个 SHA256 信息摘要运算对象 Digest sha384(Buffer data)创建一个 SHA384 信息摘要运算对象 Digest sha512(Buffer data)创建一个 SHA512 信息摘要运算对象 Digest ripemd160(Buffer data)创建一个 RIPEMD160 信息摘要运算对象 Digest hmac(Integer algo,Buffer key)根据指定的算法标识创建一个信息摘要签名运算对象 Digest hmac_md2(Buffer key)创建一个 MD2 信息摘要签名运算对象 Digest hmac_md4(Buffer key)创建一个 MD4 信息摘要签名运算对象 Digest hmac_md5(Buffer key)创建一个 MD5 信息摘要签名运算对象 Digest hmac_sha1(Buffer key)创建一个 SHA1 信息摘要签名运算对象 Digest hmac_sha224(Buffer key)创建一个 SHA224 信息摘要签名运算对象 Digest hmac_sha256(Buffer key)创建一个 SHA256 信息摘要签名运算对象 Digest hmac_sha384(Buffer key)创建一个 SHA384 信息摘要签名运算对象 Digest hmac_sha512(Buffer key)创建一个 SHA512 信息摘要签名运算对象 Digest hmac_ripemd160(Buffer key)创建一个 RIPEMD160 信息摘要签名运算对象 Field Detail MD2 const public const MD2MD2MD2 MD2 信息摘要算法标识常量 MD4 const public const MD4MD4MD4 MD4 信息摘要算法标识常量 MD5 const public const MD5MD5MD5 MD5 信息摘要算法标识常量 SHA1 const public const SHA1SHA1SHA1 SHA1 信息摘要算法标识常量 SHA224 const public const SHA224SHA224SHA224 SHA224 信息摘要算法标识常量 SHA256 const public const SHA256SHA256SHA256 SHA256 信息摘要算法标识常量 SHA384 const public const SHA384SHA384SHA384 SHA384 信息摘要算法标识常量 SHA512 const public const SHA512SHA512SHA512 SHA512 信息摘要算法标识常量 RIPEMD160 const public const RIPEMD160RIPEMD160RIPEMD160 RIPEMD160 信息摘要算法标识常量 Method Detail digest Digest digest(Integer algo,Buffer data) 根据指定的算法标识创建一个信息摘要运算对象 Parameters algo 指定摘要运算算法 data 创建同时更新的二进制数据 Returns 返回构造的信息摘要对象 digest Digest digest(Integer algo) 根据指定的算法标识创建一个信息摘要运算对象 Parameters algo 指定摘要运算算法 Returns 返回构造的信息摘要对象 md2 Digest md2(Buffer data) 创建一个 MD2 信息摘要运算对象 Parameters data 创建同时更新的二进制数据 Returns 返回构造的信息摘要对象 md4 Digest md4(Buffer data) 创建一个 MD4 信息摘要运算对象 Parameters data 创建同时更新的二进制数据 Returns 返回构造的信息摘要对象 md5 Digest md5(Buffer data) 创建一个 MD5 信息摘要运算对象 Parameters data 创建同时更新的二进制数据 Returns 返回构造的信息摘要对象 sha1 Digest sha1(Buffer data) 创建一个 SHA1 信息摘要运算对象 Parameters data 创建同时更新的二进制数据 Returns 返回构造的信息摘要对象 sha224 Digest sha224(Buffer data) 创建一个 SHA224 信息摘要运算对象 Parameters data 创建同时更新的二进制数据 Returns 返回构造的信息摘要对象 sha256 Digest sha256(Buffer data) 创建一个 SHA256 信息摘要运算对象 Parameters data 创建同时更新的二进制数据 Returns 返回构造的信息摘要对象 sha384 Digest sha384(Buffer data) 创建一个 SHA384 信息摘要运算对象 Parameters data 创建同时更新的二进制数据 Returns 返回构造的信息摘要对象 sha512 Digest sha512(Buffer data) 创建一个 SHA512 信息摘要运算对象 Parameters data 创建同时更新的二进制数据 Returns 返回构造的信息摘要对象 ripemd160 Digest ripemd160(Buffer data) 创建一个 RIPEMD160 信息摘要运算对象 Parameters data 创建同时更新的二进制数据 Returns 返回构造的信息摘要对象 hmac Digest hmac(Integer algo,Buffer key) 根据指定的算法标识创建一个信息摘要签名运算对象 Parameters algo 指定摘要运算算法 key 二进制签名密钥 Returns 返回构造的信息摘要对象 hmac_md2 Digest hmac_md2(Buffer key) 创建一个 MD2 信息摘要签名运算对象 Parameters key 二进制签名密钥 Returns 返回构造的信息摘要对象 hmac_md4 Digest hmac_md4(Buffer key) 创建一个 MD4 信息摘要签名运算对象 Parameters key 二进制签名密钥 Returns 返回构造的信息摘要对象 hmac_md5 Digest hmac_md5(Buffer key) 创建一个 MD5 信息摘要签名运算对象 Parameters key 二进制签名密钥 Returns 返回构造的信息摘要对象 hmac_sha1 Digest hmac_sha1(Buffer key) 创建一个 SHA1 信息摘要签名运算对象 Parameters key 二进制签名密钥 Returns 返回构造的信息摘要对象 hmac_sha224 Digest hmac_sha224(Buffer key) 创建一个 SHA224 信息摘要签名运算对象 Parameters key 二进制签名密钥 Returns 返回构造的信息摘要对象 hmac_sha256 Digest hmac_sha256(Buffer key) 创建一个 SHA256 信息摘要签名运算对象 Parameters key 二进制签名密钥 Returns 返回构造的信息摘要对象 hmac_sha384 Digest hmac_sha384(Buffer key) 创建一个 SHA384 信息摘要签名运算对象 Parameters key 二进制签名密钥 Returns 返回构造的信息摘要对象 hmac_sha512 Digest hmac_sha512(Buffer key) 创建一个 SHA512 信息摘要签名运算对象 Parameters key 二进制签名密钥 Returns 返回构造的信息摘要对象 hmac_ripemd160 Digest hmac_ripemd160(Buffer key) 创建一个 RIPEMD160 信息摘要签名运算对象 Parameters key 二进制签名密钥 Returns 返回构造的信息摘要对象 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/hex/",
	"title": "hex",
	"tags": [],
	"description": "hex 编码与解码模块 引用方式：",
	"content": "hex 编码与解码模块 引用方式： var encoding = require(&#39;encoding&#39;); var hex = encoding.hex; 或者 var hex = require(&#39;hex&#39;); Method Summary Type Method and Description String encode(Buffer data)以 hex 方式编码数据 Buffer decode(String data)以 hex 方式解码字符串为二进制数据 Method Detail encode String encode(Buffer data) 以 hex 方式编码数据 Parameters data 要编码的数据 Returns 返回编码的字符串 decode Buffer decode(String data) 以 hex 方式解码字符串为二进制数据 Parameters data 要解码的字符串 Returns 返回解码的二进制数据 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/http/",
	"title": "http",
	"tags": [],
	"description": "超文本传输协议模块，用以支持 http 协议处理",
	"content": "超文本传输协议模块，用以支持 http 协议处理 Field Summary Type Method and Description readonly List public static readonly List cookiescookiescookies返回http客户端的 HttpCookie 对象列表 Integer public static Integer timeouttimeouttimeout查询和设置超时时间 Boolean public static Boolean enableCookieenableCookieenableCookiecookie功能开关，默认开启 Boolean public static Boolean autoRedirectautoRedirectautoRedirect自动redirect功能开关，默认开启 String public static String userAgentuserAgentuserAgent查询和设置 http 请求中的浏览器标识 Method Summary Type Method and Description HttpRequest new Request()创建一个 http 请求对象，参见 HttpRequest HttpResponse new Response()创建一个 http 响应对象，参见 HttpResponse HttpCookie new Cookie()创建一个 http cookie 对象，参见 HttpCookie HttpServer new Server()创建一个 http 服务器，参见 HttpServer HttpClient new Client()创建一个 http 客户端，参见 HttpClient HttpsServer new HttpsServer()创建一个 https 服务器，参见 HttpsServer HttpHandler new Handler()创建一个 http 协议处理器对象，参见 HttpHandler Handler fileHandler(String root,Object mimes)创建一个 http 静态文件处理器，用以用静态文件响应 http 消息 HttpResponse request(Stream conn,HttpRequest req)发送 http 请求到指定的流对象，并返回结果 HttpResponse request(String method,String url,Object headers)请求指定的 url，并返回结果 HttpResponse request(String method,String url,SeekableStream body,Map headers)请求指定的 url，并返回结果 HttpResponse request(String method,String url,SeekableStream body,Object headers)请求指定的 url，并返回结果 HttpResponse request(String method,String url,Buffer body,Object headers)请求指定的 url，并返回结果 HttpResponse get(String url,Object headers)用 GET 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;GET&amp;rdquo;, &amp;hellip;) HttpResponse post(String url,SeekableStream body,Object headers)用 POST 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;POST&amp;rdquo;, &amp;hellip;) HttpResponse post(String url,Buffer body,Object headers)用 POST 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;POST&amp;rdquo;, &amp;hellip;) HttpResponse post(String url,Object headers)用 POST 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;POST&amp;rdquo;, &amp;hellip;) HttpResponse del(String url,Object headers)用 DELETE 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;DELETE&amp;rdquo;, &amp;hellip;) HttpResponse put(String url,SeekableStream body,Object headers)用 PUT 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;PUT&amp;rdquo;, &amp;hellip;) HttpResponse put(String url,Buffer body,Object headers)用 PUT 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;PUT&amp;rdquo;, &amp;hellip;) HttpResponse put(String url,Object headers)用 PUT 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;PUT&amp;rdquo;, &amp;hellip;) HttpResponse patch(String url,SeekableStream body,Object headers)用 PATCH 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;PATCH&amp;rdquo;, &amp;hellip;) HttpResponse patch(String url,Buffer body,Object headers)用 PATCH 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;PATCH&amp;rdquo;, &amp;hellip;) HttpResponse patch(String url,Object headers)用 PATCH 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;PATCH&amp;rdquo;, &amp;hellip;) Field Detail cookies readonly List public static readonly List cookiescookiescookies 返回http客户端的 HttpCookie 对象列表 timeout Integer public static Integer timeouttimeouttimeout 查询和设置超时时间 enableCookie Boolean public static Boolean enableCookieenableCookieenableCookie cookie功能开关，默认开启 autoRedirect Boolean public static Boolean autoRedirectautoRedirectautoRedirect 自动redirect功能开关，默认开启 userAgent String public static String userAgentuserAgentuserAgent 查询和设置 http 请求中的浏览器标识 Method Detail Request HttpRequest new Request() 创建一个 http 请求对象，参见 HttpRequest Response HttpResponse new Response() 创建一个 http 响应对象，参见 HttpResponse Cookie HttpCookie new Cookie() 创建一个 http cookie 对象，参见 HttpCookie Server HttpServer new Server() 创建一个 http 服务器，参见 HttpServer Client HttpClient new Client() 创建一个 http 客户端，参见 HttpClient HttpsServer HttpsServer new HttpsServer() 创建一个 https 服务器，参见 HttpsServer Handler HttpHandler new Handler() 创建一个 http 协议处理器对象，参见 HttpHandler fileHandler Handler fileHandler(String root,Object mimes) 创建一个 http 静态文件处理器，用以用静态文件响应 http 消息 Parameters root 文件根路径 mimes 扩展 mime 设置 Returns 返回一个静态文件处理器用于处理 http 消息 fileHandler 支持 gzip 预压缩，当请求接受 gzip 编码，且相同路径下 filename.ext.gz 文件存在时，将直接返回此文件， 从而避免重复压缩带来服务器负载。 request HttpResponse request(Stream conn,HttpRequest req) 发送 http 请求到指定的流对象，并返回结果 Parameters conn 指定处理请求的流对象 req 要发送的 HttpRequest 对象 Returns 返回服务器响应 request HttpResponse request(String method,String url,Object headers) 请求指定的 url，并返回结果 Parameters method 指定 http 请求方法：GET, POST 等 url 指定 url，必须是包含主机的完整 url headers 指定附加的 http 头，缺省无附加头 Returns 返回服务器响应 request HttpResponse request(String method,String url,SeekableStream body,Map headers) 请求指定的 url，并返回结果 Parameters method 指定 http 请求方法：GET, POST 等 url 指定 url，必须是包含主机的完整 url body 指定发送的 body 内容 headers 指定附加的 http 头 Returns 返回服务器响应 request HttpResponse request(String method,String url,SeekableStream body,Object headers) 请求指定的 url，并返回结果 Parameters method 指定 http 请求方法：GET, POST 等 url 指定 url，必须是包含主机的完整 url body 指定发送的 body 内容 headers 指定附加的 http 头，缺省无附加头 Returns 返回服务器响应 request HttpResponse request(String method,String url,Buffer body,Object headers) 请求指定的 url，并返回结果 Parameters method 指定 http 请求方法：GET, POST 等 url 指定 url，必须是包含主机的完整 url body 指定发送的 body 内容 headers 指定附加的 http 头，缺省无附加头 Returns 返回服务器响应 get HttpResponse get(String url,Object headers) 用 GET 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;GET&amp;rdquo;, &amp;hellip;) Parameters url 指定 url，必须是包含主机的完整 url headers 指定附加的 http 头，缺省无附加头 Returns 返回服务器响应 post HttpResponse post(String url,SeekableStream body,Object headers) 用 POST 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;POST&amp;rdquo;, &amp;hellip;) Parameters url 指定 url，必须是包含主机的完整 url body 指定发送的 body 内容 headers 指定附加的 http 头，缺省无附加头 Returns 返回服务器响应 post HttpResponse post(String url,Buffer body,Object headers) 用 POST 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;POST&amp;rdquo;, &amp;hellip;) Parameters url 指定 url，必须是包含主机的完整 url body 指定发送的 body 内容 headers 指定附加的 http 头，缺省无附加头 Returns 返回服务器响应 post HttpResponse post(String url,Object headers) 用 POST 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;POST&amp;rdquo;, &amp;hellip;) Parameters url 指定 url，必须是包含主机的完整 url headers 指定附加的 http 头，缺省无附加头 Returns 返回服务器响应 del HttpResponse del(String url,Object headers) 用 DELETE 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;DELETE&amp;rdquo;, &amp;hellip;) Parameters url 指定 url，必须是包含主机的完整 url headers 指定附加的 http 头，缺省无附加头 Returns 返回服务器响应 put HttpResponse put(String url,SeekableStream body,Object headers) 用 PUT 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;PUT&amp;rdquo;, &amp;hellip;) Parameters url 指定 url，必须是包含主机的完整 url body 指定发送的 body 内容 headers 指定附加的 http 头，缺省无附加头 Returns 返回服务器响应 put HttpResponse put(String url,Buffer body,Object headers) 用 PUT 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;PUT&amp;rdquo;, &amp;hellip;) Parameters url 指定 url，必须是包含主机的完整 url body 指定发送的 body 内容 headers 指定附加的 http 头，缺省无附加头 Returns 返回服务器响应 put HttpResponse put(String url,Object headers) 用 PUT 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;PUT&amp;rdquo;, &amp;hellip;) Parameters url 指定 url，必须是包含主机的完整 url headers 指定附加的 http 头，缺省无附加头 Returns 返回服务器响应 patch HttpResponse patch(String url,SeekableStream body,Object headers) 用 PATCH 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;PATCH&amp;rdquo;, &amp;hellip;) Parameters url 指定 url，必须是包含主机的完整 url body 指定发送的 body 内容 headers 指定附加的 http 头，缺省无附加头 Returns 返回服务器响应 patch HttpResponse patch(String url,Buffer body,Object headers) 用 PATCH 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;PATCH&amp;rdquo;, &amp;hellip;) Parameters url 指定 url，必须是包含主机的完整 url body 指定发送的 body 内容 headers 指定附加的 http 头，缺省无附加头 Returns 返回服务器响应 patch HttpResponse patch(String url,Object headers) 用 PATCH 方法请求指定的 url，并返回结果，等同于 request(&amp;ldquo;PATCH&amp;rdquo;, &amp;hellip;) Parameters url 指定 url，必须是包含主机的完整 url headers 指定附加的 http 头，缺省无附加头 Returns 返回服务器响应 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/iconv/",
	"title": "iconv",
	"tags": [],
	"description": "iconv 编码与解码模块 引用方式：",
	"content": "iconv 编码与解码模块 引用方式： var encoding = require(&#39;encoding&#39;); var iconv = encoding.iconv; 或者 var iconv = require(&#39;iconv&#39;); Method Summary Type Method and Description Buffer encode(String charset,String data)用 iconv 将文本转换为二进制数据 String decode(String charset,Buffer data)用 iconv 将 Buffer 内容转换为文本 Method Detail encode Buffer encode(String charset,String data) 用 iconv 将文本转换为二进制数据 Parameters charset 指定字符集 data 要转换的文本 Returns 返回解码的二进制数据 decode String decode(String charset,Buffer data) 用 iconv 将 Buffer 内容转换为文本 Parameters charset 指定字符集 data 要转换的二进制数据 Returns 返回编码的字符串 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/io/",
	"title": "io",
	"tags": [],
	"description": "输入输出处理模块",
	"content": "输入输出处理模块 使用方法： var io = require(&#39;io&#39;); Method Summary Type Method and Description MemoryStream new MemoryStream()创建一个内存流对象，参见 MemoryStream BufferedStream new BufferedStream()创建一个缓存流读取对象，参见 BufferedStream Long copyStream(Stream from,Stream to,Long bytes)复制流数据到目标流中 void bridge(Stream stm1,Stream stm2)双向复制流数据，直到流中无数据，或者流被关闭 Method Detail MemoryStream MemoryStream new MemoryStream() 创建一个内存流对象，参见 MemoryStream BufferedStream BufferedStream new BufferedStream() 创建一个缓存流读取对象，参见 BufferedStream copyStream Long copyStream(Stream from,Stream to,Long bytes) 复制流数据到目标流中 Parameters from 源流对象 to 目标流对象 bytes 复制的字节数 Returns 返回复制的字节数 bridge void bridge(Stream stm1,Stream stm2) 双向复制流数据，直到流中无数据，或者流被关闭 Parameters stm1 流对象一 stm2 流对象二 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/json/",
	"title": "json",
	"tags": [],
	"description": "json 编码与解码模块 引用方式：",
	"content": "json 编码与解码模块 引用方式： var encoding = require(&#39;encoding&#39;); var json = encoding.json; 或者 var json = require(&#39;json&#39;); Method Summary Type Method and Description String encode(Value data)以 json 格式编码变量 Value decode(String data)以 json 方式解码字符串为一个变量 Method Detail encode String encode(Value data) 以 json 格式编码变量 Parameters data 要编码的变量 Returns 返回编码的字符串 decode Value decode(String data) 以 json 方式解码字符串为一个变量 Parameters data 要解码的字符串 Returns 返回解码的变量 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/mq/",
	"title": "mq",
	"tags": [],
	"description": "消息队列模块",
	"content": "消息队列模块 Field Summary Type Method and Description void public static static MessageMessageMessage创建一个消息对象，参见 Message void public static static HttpHandlerHttpHandlerHttpHandler创建一个 http 协议处理器对象，参见 HttpHandler void public static static HandlerHandlerHandler创建一个消息处理器对象，传递值内置处理器则直接返回 void public static static ChainChainChain创建一个消息处理器链处理对象，参见 Chain void public static static RoutingRoutingRouting创建一个消息处理器路由对象，参见 Routing Method Summary Type Method and Description Handler await()创建一个异步等待处理器 Handler nullHandler()创建一个空处理器对象，次处理对象不做任何处理直接返回 void invoke(Handler hdlr,object v)使用给定的处理器处理一个消息或对象 Field Detail Message void public static static MessageMessageMessage 创建一个消息对象，参见 Message HttpHandler void public static static HttpHandlerHttpHandlerHttpHandler 创建一个 http 协议处理器对象，参见 HttpHandler Handler void public static static HandlerHandlerHandler 创建一个消息处理器对象，传递值内置处理器则直接返回 Parameters hdlr 内置消息处理器，处理函数，链式处理数组，路由对象: Function javascript 函数，将使用此函数进行处理 Handler 内置处理器，将使用此处理器进行处理 链式处理数组，等同于返回 new mq.Chain(hdlr)，参见 Chain 路由对象，等同于返回 new mq.Routing(hdlr)，参见 Routing Returns 返回封装了处理函数的处理器 消息处理函数语法如下： function func(v){ } 参数 v 为正在处理的消息，返回结果允许有四种: Function javascript 函数，将使用此函数进行下一阶段处理 Handler 内置处理器，将使用此处理器进行下一阶段处理 链式处理数组，等同于 new mq.Chain(v)，参见 Chain 路由对象，等同于 new mq.Routing(v)，参见 Routing 无返回或者其他的返回结果将结束消息处理。 Chain void public static static ChainChainChain 创建一个消息处理器链处理对象，参见 Chain Routing void public static static RoutingRoutingRouting 创建一个消息处理器路由对象，参见 Routing Method Detail await Handler await() 创建一个异步等待处理器 Returns 返回创建的处理器 异步等待处理器用于需要异步处理的消息处理模式，示例如下： function func(v){ var await = mq.await(); call_some_async_func(v1, v2, v3, function() { await.end(); }); return await; } 示例是一个 javascript 消息处理函数，当函数返回时，消息处理引擎将等待 await，直到 await.end 被调用，才继续下一阶段的处理。 nullHandler Handler nullHandler() 创建一个空处理器对象，次处理对象不做任何处理直接返回 Returns 返回空处理函数 invoke void invoke(Handler hdlr,object v) 使用给定的处理器处理一个消息或对象 Parameters hdlr 指定使用的处理器 v 指定要处理的消息或对象 不同于处理器的 invoke 方法，此方法将循环调用每个处理器的返回处理器，直到处理器返回 null 为止。 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/net/",
	"title": "net",
	"tags": [],
	"description": "网络访问模块",
	"content": "网络访问模块 基础模块。可用于创建和操作网络资源，引用方式： var net = require(&#39;net&#39;); Field Summary Type Method and Description const public const AF_INETAF_INETAF_INET地址集常量，指定 ipv4 const public const AF_INET6AF_INET6AF_INET6地址集常量，指定 ipv6 const public const SOCK_STREAMSOCK_STREAMSOCK_STREAM协议族常量，指定 tcp const public const SOCK_DGRAMSOCK_DGRAMSOCK_DGRAM协议族常量，指定 udp void public static static SocketSocketSocket创建一个 Socket 对象，参见 Socket void public static static SmtpSmtpSmtp创建一个 Smtp 对象，参见 Smtp void public static static TcpServerTcpServerTcpServer创建一个 TcpServer 对象，参见 TcpServer Method Summary Type Method and Description Object info()查询当前运行环境网络信息 String resolve(String name,Integer family)查询给定的主机名的地址 String ip(String name)快速查询的主机地址，等效与 resolve(name) String ipv6(String name)快速查询的主机 ipv6 地址，等效与 resolve(name, net.AF_INET6) Stream connect(String host,Integer port,Integer timeout,Integer family)创建一个 Socket 对象并建立连接，参见 Socket Stream connect(String url,Integer timeout)创建一个 Socket 或 SslSocket 对象并建立连接 Smtp openSmtp(String url,Integer timeout)创建一个 Smtp 对象并建立连接，参见 Smtp UrlObject new Url()创建一个 UrlObject 对象，参见 UrlObject String backend()查询当前系统异步网络引擎 Field Detail AF_INET const public const AF_INETAF_INETAF_INET 地址集常量，指定 ipv4 AF_INET6 const public const AF_INET6AF_INET6AF_INET6 地址集常量，指定 ipv6 SOCK_STREAM const public const SOCK_STREAMSOCK_STREAMSOCK_STREAM 协议族常量，指定 tcp SOCK_DGRAM const public const SOCK_DGRAMSOCK_DGRAMSOCK_DGRAM 协议族常量，指定 udp Socket void public static static SocketSocketSocket 创建一个 Socket 对象，参见 Socket Smtp void public static static SmtpSmtpSmtp 创建一个 Smtp 对象，参见 Smtp TcpServer void public static static TcpServerTcpServerTcpServer 创建一个 TcpServer 对象，参见 TcpServer Method Detail info Object info() 查询当前运行环境网络信息 Returns 返回网卡信息 resolve String resolve(String name,Integer family) 查询给定的主机名的地址 Parameters name 指定主机名 family 指定查询返回类型，缺省为 AF_INET Returns 返回查询的 ip 字符串 ip String ip(String name) 快速查询的主机地址，等效与 resolve(name) Parameters name 指定主机名 Returns 返回查询的 ip 字符串 ipv6 String ipv6(String name) 快速查询的主机 ipv6 地址，等效与 resolve(name, net.AF_INET6) Parameters name 指定主机名 Returns 返回查询的 ipv6 字符串 connect Stream connect(String host,Integer port,Integer timeout,Integer family) 创建一个 Socket 对象并建立连接，参见 Socket Parameters host 指定对方地址或主机名 port 指定对方端口 timeout 指定超时时间，单位是毫秒，默认为0 family 指定地址集，缺省为 AF_INET，ipv4 Returns 返回连接成功的 Socket 对象 connect Stream connect(String url,Integer timeout) 创建一个 Socket 或 SslSocket 对象并建立连接 Parameters url 指定连接的协议，可以是：tcp://host:port 或者 ssl://host:port timeout 指定超时时间，单位是毫秒，默认为0 Returns 返回连接成功的 Socket 或者 SslSocket 对象 openSmtp Smtp openSmtp(String url,Integer timeout) 创建一个 Smtp 对象并建立连接，参见 Smtp Parameters url 指定连接的协议，可以是：tcp://host:port 或者 ssl://host:port timeout 指定超时时间，单位是毫秒，默认为0 Returns 返回连接成功的 Smtp 对象 Url UrlObject new Url() 创建一个 UrlObject 对象，参见 UrlObject backend String backend() 查询当前系统异步网络引擎 Returns 返回网络引擎名称 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/os/",
	"title": "os",
	"tags": [],
	"description": "操作系统与文件系统处理模块",
	"content": "操作系统与文件系统处理模块 使用方法： var os = require(&#39;os&#39;); Field Summary Type Method and Description void public static static ServiceServiceServiceService 构造函数，参见 Service readonly String public static readonly String hostnamehostnamehostname查询当前运行环境主机名 readonly String public static readonly String typetypetype查询当前运行环境操作系统名称 readonly String public static readonly String versionversionversion查询当前运行环境操作系统版本 readonly String public static readonly String archarcharch查询当前 cpu 环境，可能的结果为 &amp;lsquo;amd64&amp;rsquo;, &amp;lsquo;arm&amp;rsquo;, &amp;lsquo;arm64&amp;rsquo;, &amp;lsquo;ia32&amp;rsquo; readonly Integer public static readonly Integer timezonetimezonetimezone查询运行环境当前时区 readonly String public static readonly String EOLEOLEOL查询当前运行环境行结尾标识，posix:&amp;rdquo;\n&amp;rdquo;；windows:&amp;rdquo;\r\n&amp;rdquo; readonly String public static readonly String execPathexecPathexecPath查询当前运行执行文件完整路径 Method Summary Type Method and Description Number uptime()查询运行环境运行时间，以秒为单位 Array loadavg()查询运行环境 1分钟，5分钟，15分钟平均负载 Long totalmem()查询运行环境总内存，以字节为单位 Long freemem()查询运行环境可用内存，以字节为单位 Array CPUInfo()查询当前运行环境 cpu 个数和参数 Integer CPUs()查询当前运行环境 cpu 个数 String tmpdir()查询当前运行环境临时文件目录 Object networkInfo()查询当前运行环境网络信息 Array printerInfo()查询当前主机的打印机信息 BufferedStream openPrinter(String name)创建一个打印机输出对象 String platform()查询当前平台名称，可能的结果为 &amp;lsquo;darwin&amp;rsquo;, &amp;lsquo;freebsd&amp;rsquo;, &amp;lsquo;linux&amp;rsquo;, 或 &amp;lsquo;win32&amp;rsquo; Date time(String tmString)解析时间字符串或查询运行环境当前时间 Date dateAdd(Date d,Integer num,String part)时间计算函数，根据 part 指定计算时间 Object memoryUsage()查询当前进程内存使用报告 Field Detail Service void public static static ServiceServiceService Service 构造函数，参见 Service hostname readonly String public static readonly String hostnamehostnamehostname 查询当前运行环境主机名 type readonly String public static readonly String typetypetype 查询当前运行环境操作系统名称 version readonly String public static readonly String versionversionversion 查询当前运行环境操作系统版本 arch readonly String public static readonly String archarcharch 查询当前 cpu 环境，可能的结果为 &amp;lsquo;amd64&amp;rsquo;, &amp;lsquo;arm&amp;rsquo;, &amp;lsquo;arm64&amp;rsquo;, &amp;lsquo;ia32&amp;rsquo; timezone readonly Integer public static readonly Integer timezonetimezonetimezone 查询运行环境当前时区 EOL readonly String public static readonly String EOLEOLEOL 查询当前运行环境行结尾标识，posix:&amp;rdquo;\n&amp;rdquo;；windows:&amp;rdquo;\r\n&amp;rdquo; execPath readonly String public static readonly String execPathexecPathexecPath 查询当前运行执行文件完整路径 Method Detail uptime Number uptime() 查询运行环境运行时间，以秒为单位 Returns 返回表示时间的数值 loadavg Array loadavg() 查询运行环境 1分钟，5分钟，15分钟平均负载 Returns 返回包含三个负载数据的数组 totalmem Long totalmem() 查询运行环境总内存，以字节为单位 Returns 返回内存数据 freemem Long freemem() 查询运行环境可用内存，以字节为单位 Returns 返回内存数据 CPUInfo Array CPUInfo() 查询当前运行环境 cpu 个数和参数 Returns 返回包含 cpu 参数的数组，每一项对应一个 cpu CPUs Integer CPUs() 查询当前运行环境 cpu 个数 Returns 返回 cpu 个数 tmpdir String tmpdir() 查询当前运行环境临时文件目录 Returns 返回临时文件目录 networkInfo Object networkInfo() 查询当前运行环境网络信息 Returns 返回网卡信息 printerInfo Array printerInfo() 查询当前主机的打印机信息 Returns 返回打印机信息 openPrinter BufferedStream openPrinter(String name) 创建一个打印机输出对象 Parameters name 打印机名称 Returns 返回打印机输出对象 platform String platform() 查询当前平台名称，可能的结果为 &amp;lsquo;darwin&amp;rsquo;, &amp;lsquo;freebsd&amp;rsquo;, &amp;lsquo;linux&amp;rsquo;, 或 &amp;lsquo;win32&amp;rsquo; time Date time(String tmString) 解析时间字符串或查询运行环境当前时间 Parameters tmString 时间字符串，缺省则查询当前时间 Returns 返回 javascript Date 对象 dateAdd Date dateAdd(Date d,Integer num,String part) 时间计算函数，根据 part 指定计算时间 Parameters d 指定用于计算 Date 对象 num 指定运算的数值 part 指定运算的时间部位，接收值为：&amp;rdquo;year&amp;rdquo;, &amp;ldquo;month&amp;rdquo;, &amp;ldquo;day&amp;rdquo;, &amp;ldquo;hour&amp;rdquo;, &amp;ldquo;minute&amp;rdquo;, &amp;ldquo;second&amp;rdquo; Returns 返回 javascript Date 对象 memoryUsage Object memoryUsage() 查询当前进程内存使用报告 Returns 返回包含内存报告 内存报告生成类似以下结果： { &amp;quot;rss&amp;quot;: 8622080, &amp;quot;heapTotal&amp;quot;: 4083456, &amp;quot;heapUsed&amp;quot;: 1621800, &amp;quot;nativeObjects&amp;quot;: 122 } 其中： rss 返回进程当前占用物理内存大小 heapTotal 返回 v8 引擎堆内存大小 heapUsed 返回 v8 引擎正在使用堆内存大小 nativeObjects 返回当前有效内置对象数 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/path/",
	"title": "path",
	"tags": [],
	"description": "文件路径处理模块",
	"content": "文件路径处理模块 引用方法： var path = require(&#39;path&#39;); Field Summary Type Method and Description readonly String public static readonly String sepsepsep查询当前操作系统的路径分割字符，posix 返回 &amp;lsquo;/&amp;rsquo;, windows 返回 &amp;lsquo;\&amp;rsquo; readonly String public static readonly String delimiterdelimiterdelimiter查询当前操作系统的多路径组合字符，posix 返回 &amp;lsquo;:&amp;lsquo;, windows 返回 &amp;lsquo;;&amp;rsquo; Method Summary Type Method and Description String normalize(String path)标准化路径，处理路径中父目录等信息 String basename(String path,String ext)查询路径中的文件名称，若指定扩展名，则自动取消匹配的扩展名 String extname(String path)查询路径中的文件扩展名 String dirname(String path)查询路径中的目录路径 String fullpath(String path)转换给定路径为全路径 String join(...)合并一系列路径成为一个单一路径 String resolve(...)合并一系列路径成为一个绝对路径 Field Detail sep readonly String public static readonly String sepsepsep 查询当前操作系统的路径分割字符，posix 返回 &amp;lsquo;/&amp;rsquo;, windows 返回 &amp;lsquo;\&amp;rsquo; delimiter readonly String public static readonly String delimiterdelimiterdelimiter 查询当前操作系统的多路径组合字符，posix 返回 &amp;lsquo;:&amp;lsquo;, windows 返回 &amp;lsquo;;&amp;rsquo; Method Detail normalize String normalize(String path) 标准化路径，处理路径中父目录等信息 Parameters path 给定的未处理的路径 Returns 返回经过处理的路径 basename String basename(String path,String ext) 查询路径中的文件名称，若指定扩展名，则自动取消匹配的扩展名 Parameters path 给定查询的路径 ext 指定扩展名，若文件名中有符合条件的扩展名，将自动取消 Returns 返回文件名称 extname String extname(String path) 查询路径中的文件扩展名 Parameters path 给定查询的路径 Returns 返回得到的扩展名 dirname String dirname(String path) 查询路径中的目录路径 Parameters path 给定查询的路径 Returns 返回得到的目录的路径 fullpath String fullpath(String path) 转换给定路径为全路径 Parameters path 给定转换的路径 Returns 返回转换的全路径 join String join(...) 合并一系列路径成为一个单一路径 Parameters ... 一个或多个相关的路径 Returns 返回得到的新路径 resolve String resolve(...) 合并一系列路径成为一个绝对路径 Parameters ... 一个或多个相关的路径 Returns 返回得到的新路径 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/process/",
	"title": "process",
	"tags": [],
	"description": "进程处理模块，用以管理当前进程的资源",
	"content": "进程处理模块，用以管理当前进程的资源 引用方法： var process = require(&#39;process&#39;); Field Summary Type Method and Description readonly Array public static readonly Array argvargvargv返回当前进程的命令行参数 readonly Array public static readonly Array execArgvexecArgvexecArgv返回当前进程的特殊命令行参数，这些参数被 fibjs 用于设置运行环境 readonly String public static readonly String versionversionversion返回fibjs版本字符串 readonly String public static readonly String execPathexecPathexecPath查询当前运行执行文件完整路径 readonly Object public static readonly Object envenvenv查询当前进程的环境变量 readonly String public static readonly String archarcharch查询当前 cpu 环境，可能的结果为 &amp;lsquo;amd64&amp;rsquo;, &amp;lsquo;arm&amp;rsquo;, &amp;lsquo;arm64&amp;rsquo;, &amp;lsquo;ia32&amp;rsquo; readonly String public static readonly String platformplatformplatform查询当前平台名称，可能的结果为 &amp;lsquo;darwin&amp;rsquo;, &amp;lsquo;freebsd&amp;rsquo;, &amp;lsquo;linux&amp;rsquo;, 或 &amp;lsquo;win32&amp;rsquo; Method Summary Type Method and Description Integer umask(Integer mask)改变当前的 umask，Windows 不支持此方法 Integer umask(String mask)改变当前的 umask，Windows 不支持此方法 Integer umask()返回当前的 umask，Windows 不支持此方法 void exit(Integer code)退出当前进程，并返回结果 String cwd()返回操作系统当前工作路径 void chdir(String directory)修改操作系统当前工作路径 Number uptime()查询运行环境运行时间，以秒为单位 Object memoryUsage()查询当前进程内存使用报告 void nextTick(Function func,...)启动一个纤程 SubProcess open(String command,Array args,Object opts)运行指定的命令行，接管进程输入输出流，并返回进程对象 SubProcess open(String command,Object opts)运行指定的命令行，接管进程输入输出流，并返回进程对象 SubProcess start(String command,Array args,Object opts)运行指定的命令行，并返回进程对象 SubProcess start(String command,Object opts)运行指定的命令行，并返回进程对象 Integer run(String command,Array args,Object opts)运行指定的命令行，并返回进程的结束代码 Integer run(String command,Object opts)运行指定的命令行，并返回进程的结束代码 Field Detail argv readonly Array public static readonly Array argvargvargv 返回当前进程的命令行参数 execArgv readonly Array public static readonly Array execArgvexecArgvexecArgv 返回当前进程的特殊命令行参数，这些参数被 fibjs 用于设置运行环境 version readonly String public static readonly String versionversionversion 返回fibjs版本字符串 execPath readonly String public static readonly String execPathexecPathexecPath 查询当前运行执行文件完整路径 env readonly Object public static readonly Object envenvenv 查询当前进程的环境变量 arch readonly String public static readonly String archarcharch 查询当前 cpu 环境，可能的结果为 &amp;lsquo;amd64&amp;rsquo;, &amp;lsquo;arm&amp;rsquo;, &amp;lsquo;arm64&amp;rsquo;, &amp;lsquo;ia32&amp;rsquo; platform readonly String public static readonly String platformplatformplatform 查询当前平台名称，可能的结果为 &amp;lsquo;darwin&amp;rsquo;, &amp;lsquo;freebsd&amp;rsquo;, &amp;lsquo;linux&amp;rsquo;, 或 &amp;lsquo;win32&amp;rsquo; Method Detail umask Integer umask(Integer mask) 改变当前的 umask，Windows 不支持此方法 Parameters mask 指定新的掩码 Returns 返回之前的 mask umask Integer umask(String mask) 改变当前的 umask，Windows 不支持此方法 Parameters mask 指定新的掩码， 字符串类型八进制(e.g: &amp;ldquo;0664&amp;rdquo;) Returns 返回之前的 mask umask Integer umask() 返回当前的 umask，Windows 不支持此方法 Returns 返回当前的 mask 值 exit void exit(Integer code) 退出当前进程，并返回结果 Parameters code 返回进程结果 cwd String cwd() 返回操作系统当前工作路径 Returns 返回当前系统路径 chdir void chdir(String directory) 修改操作系统当前工作路径 Parameters directory 指定设定的新路径 uptime Number uptime() 查询运行环境运行时间，以秒为单位 Returns 返回表示时间的数值 memoryUsage Object memoryUsage() 查询当前进程内存使用报告 Returns 返回包含内存报告 内存报告生成类似以下结果： { &amp;quot;rss&amp;quot;: 8622080, &amp;quot;heapTotal&amp;quot;: 4083456, &amp;quot;heapUsed&amp;quot;: 1621800 } 其中： rss 返回进程当前占用物理内存大小 heapTotal 返回 v8 引擎堆内存大小 heapUsed 返回 v8 引擎正在使用堆内存大小 nextTick void nextTick(Function func,...) 启动一个纤程 Parameters func 制定纤程执行的函数 ... 可变参数序列，此序列会在纤程内传递给函数 open SubProcess open(String command,Array args,Object opts) 运行指定的命令行，接管进程输入输出流，并返回进程对象 Parameters command 指定运行的命令行 args 指定运行的参数列表 opts 指定运行的选项，支持的选项如下： { &amp;quot;timeout&amp;quot;: 100, // 单位为 ms &amp;quot;envs&amp;quot;: [] // 进程环境变量 } Returns 返回包含运行结果的进程对象 open SubProcess open(String command,Object opts) 运行指定的命令行，接管进程输入输出流，并返回进程对象 Parameters command 指定运行的命令行 opts 指定运行的选项，支持的选项如下： { &amp;quot;timeout&amp;quot;: 100, // 单位为 ms &amp;quot;envs&amp;quot;: [] // 进程环境变量 } Returns 返回包含运行结果的进程对象 start SubProcess start(String command,Array args,Object opts) 运行指定的命令行，并返回进程对象 Parameters command 指定运行的命令行 args 指定运行的参数列表 opts 指定运行的选项，支持的选项如下： { &amp;quot;timeout&amp;quot;: 100, // 单位为 ms &amp;quot;envs&amp;quot;: [] // 进程环境变量 } Returns 返回包含运行结果的进程对象 start SubProcess start(String command,Object opts) 运行指定的命令行，并返回进程对象 Parameters command 指定运行的命令行 opts 指定运行的选项，支持的选项如下： { &amp;quot;timeout&amp;quot;: 100, // 单位为 ms &amp;quot;envs&amp;quot;: [] // 进程环境变量 } Returns 返回包含运行结果的进程对象 run Integer run(String command,Array args,Object opts) 运行指定的命令行，并返回进程的结束代码 Parameters command 指定运行的命令行 args 指定运行的参数列表 opts 指定运行的选项，支持的选项如下： { &amp;quot;timeout&amp;quot;: 100, // 单位为 ms &amp;quot;envs&amp;quot;: [] // 进程环境变量 } Returns 返回命令的运行结果 run Integer run(String command,Object opts) 运行指定的命令行，并返回进程的结束代码 Parameters command 指定运行的命令行 opts 指定运行的选项，支持的选项如下： { &amp;quot;timeout&amp;quot;: 100, // 单位为 ms &amp;quot;envs&amp;quot;: [] // 进程环境变量 } Returns 返回命令的运行结果 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/profiler/",
	"title": "profiler",
	"tags": [],
	"description": "内存 profiler 模块",
	"content": "内存 profiler 模块 使用方法： var profiler = require(&#39;profiler&#39;); Field Summary Type Method and Description const public const Node_HiddenNode_HiddenNode_Hidden隐藏节点，当显示给用户时可以被过滤掉 const public const Node_ArrayNode_ArrayNode_Array数组 const public const Node_StringNode_StringNode_String字符串 const public const Node_ObjectNode_ObjectNode_ObjectJS对象（字符串和数组除外） const public const Node_CodeNode_CodeNode_Code编译后的代码 const public const Node_ClosureNode_ClosureNode_Closure函数闭包 const public const Node_RegExpNode_RegExpNode_RegExp正则表达式 const public const Node_HeapNumberNode_HeapNumberNode_HeapNumber堆中排好序的数字 const public const Node_NativeNode_NativeNode_NativeNative对象（非v8堆上的） const public const Node_SyntheticNode_SyntheticNode_SyntheticSynthetic对象 const public const Node_ConsStringNode_ConsStringNode_ConsString拼接的字符串 const public const Node_SlicedStringNode_SlicedStringNode_SlicedString分割的字符串 const public const Node_SymbolNode_SymbolNode_Symbol符号（ES6） const public const Node_SimdValueNode_SimdValueNode_SimdValue堆中排好序的SIMD值(ES7) const public const Edge_ContextVariableEdge_ContextVariableEdge_ContextVariable函数中的变量 const public const Edge_ElementEdge_ElementEdge_Element数组中的元素 const public const Edge_PropertyEdge_PropertyEdge_Property有名对象的属性 const public const Edge_InternalEdge_InternalEdge_InternalJS无法进入的链接 const public const Edge_HiddenEdge_HiddenEdge_Hidden指向需要事先计算出空间大小的节点 const public const Edge_ShortcutEdge_ShortcutEdge_Shortcut指向无法事先计算出空间大小的节点 const public const Edge_WeakEdge_WeakEdge_Weak一个弱引用（被GC忽视） Method Summary Type Method and Description void saveSnapshot(String fname)根据指定名称保存一个堆快照 HeapSnapshot loadSnapshot(String fname)根据指定名称读取一个堆快照 HeapSnapshot takeSnapshot()获取当前时间节点的堆快照，堆快照记录了当前时刻JS堆的状态 Object diff(Function test)执行给定的函数，并对比执行前后 v8 堆的变化 Field Detail Node_Hidden const public const Node_HiddenNode_HiddenNode_Hidden 隐藏节点，当显示给用户时可以被过滤掉 Node_Array const public const Node_ArrayNode_ArrayNode_Array 数组 Node_String const public const Node_StringNode_StringNode_String 字符串 Node_Object const public const Node_ObjectNode_ObjectNode_Object JS对象（字符串和数组除外） Node_Code const public const Node_CodeNode_CodeNode_Code 编译后的代码 Node_Closure const public const Node_ClosureNode_ClosureNode_Closure 函数闭包 Node_RegExp const public const Node_RegExpNode_RegExpNode_RegExp 正则表达式 Node_HeapNumber const public const Node_HeapNumberNode_HeapNumberNode_HeapNumber 堆中排好序的数字 Node_Native const public const Node_NativeNode_NativeNode_Native Native对象（非v8堆上的） Node_Synthetic const public const Node_SyntheticNode_SyntheticNode_Synthetic Synthetic对象 Node_ConsString const public const Node_ConsStringNode_ConsStringNode_ConsString 拼接的字符串 Node_SlicedString const public const Node_SlicedStringNode_SlicedStringNode_SlicedString 分割的字符串 Node_Symbol const public const Node_SymbolNode_SymbolNode_Symbol 符号（ES6） Node_SimdValue const public const Node_SimdValueNode_SimdValueNode_SimdValue 堆中排好序的SIMD值(ES7) Edge_ContextVariable const public const Edge_ContextVariableEdge_ContextVariableEdge_ContextVariable 函数中的变量 Edge_Element const public const Edge_ElementEdge_ElementEdge_Element 数组中的元素 Edge_Property const public const Edge_PropertyEdge_PropertyEdge_Property 有名对象的属性 Edge_Internal const public const Edge_InternalEdge_InternalEdge_Internal JS无法进入的链接 Edge_Hidden const public const Edge_HiddenEdge_HiddenEdge_Hidden 指向需要事先计算出空间大小的节点 Edge_Shortcut const public const Edge_ShortcutEdge_ShortcutEdge_Shortcut 指向无法事先计算出空间大小的节点 Edge_Weak const public const Edge_WeakEdge_WeakEdge_Weak 一个弱引用（被GC忽视） Method Detail saveSnapshot void saveSnapshot(String fname) 根据指定名称保存一个堆快照 Parameters fname 堆快照名称 loadSnapshot HeapSnapshot loadSnapshot(String fname) 根据指定名称读取一个堆快照 Parameters fname 堆快照名称 Returns 返回读取到的堆快照 takeSnapshot HeapSnapshot takeSnapshot() 获取当前时间节点的堆快照，堆快照记录了当前时刻JS堆的状态 Returns 返回获取到的堆信息快照 diff Object diff(Function test) 执行给定的函数，并对比执行前后 v8 堆的变化 Parameters test 给定要测试的函数 Returns 返回对比的结果 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/querystring/",
	"title": "querystring",
	"tags": [],
	"description": "http query 处理模块",
	"content": "http query 处理模块 引用方法： var querystring = require(&#39;querystring&#39;); Method Summary Type Method and Description String escape(String str)url 部件字符串安全编码 String unescape(String str)url 安全字符串解码 HttpCollection parse(String str,String sep,String eq,Object opt)解析 query 字符串 String stringify(Object obj,String sep,String eq,Object opt)序列化一个对象为 query 字符串 Method Detail escape String escape(String str) url 部件字符串安全编码 Parameters url 要编码的 url Returns 返回编码的字符串 unescape String unescape(String str) url 安全字符串解码 Parameters url 要解码的 url Returns 返回解码的字符串 parse HttpCollection parse(String str,String sep,String eq,Object opt) 解析 query 字符串 Parameters str 要解析的字符串 sep 解析时使用的分割字符串，缺省为 &amp;amp; eq 解析时使用的赋值字符串，缺省为 = Returns 返回解码的对象 stringify String stringify(Object obj,String sep,String eq,Object opt) 序列化一个对象为 query 字符串 Parameters obj 要序列化的对象 sep 序列化时使用的分割字符串，缺省为 &amp;amp; eq 序列化时使用的赋值字符串，缺省为 = Returns 返回序列化后的字符串 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/re/",
	"title": "re",
	"tags": [],
	"description": "正则表达式处理模块",
	"content": "正则表达式处理模块 Method Summary Type Method and Description Regex compile(String pattern,String opt)编译一个正则表达式模版，并返回正则表达式处理对象 Method Detail compile Regex compile(String pattern,String opt) 编译一个正则表达式模版，并返回正则表达式处理对象 Parameters pattern 正则表达式 opt 规定匹配的类型。&amp;rdquo;g&amp;rdquo; 用于全局匹配，&amp;rdquo;i&amp;rdquo; 用于区分大小写，&amp;rdquo;gi&amp;rdquo; 用于全局区分大小写的匹配 Returns 返回正则表达式对象 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/registry/",
	"title": "registry",
	"tags": [],
	"description": "Windows 注册表访问模块 引用方式：",
	"content": "Windows 注册表访问模块 引用方式： var registry = require(&#39;registry&#39;); var value = registry.get(registry.CLASSES_ROOT, &amp;quot;\node1\node2\value&amp;quot;); Field Summary Type Method and Description const public const CLASSES_ROOTCLASSES_ROOTCLASSES_ROOT注册表根，存储Windows可识别的文件类型的详细列表，以及相关联的程序 const public const CURRENT_USERCURRENT_USERCURRENT_USER注册表根，存储当前用户设置的信息 const public const LOCAL_MACHINELOCAL_MACHINELOCAL_MACHINE注册表根，包括安装在计算机上的硬件和软件的信息 const public const USERSUSERSUSERS注册表根，包含使用计算机的用户的信息 const public const CURRENT_CONFIGCURRENT_CONFIGCURRENT_CONFIG注册表根，这个分支包含计算机当前的硬件配置信息 const public const SZSZSZ注册表数据类型，字符串 const public const EXPAND_SZEXPAND_SZEXPAND_SZ注册表数据类型，扩展字符串 const public const DWORDDWORDDWORD注册表数据类型，32 位数值 const public const QWORDQWORDQWORD注册表数据类型，64 位数值 Method Summary Type Method and Description List listSubKey(Integer root,String key)返回指定键值下的所有子健 List listValue(Integer root,String key)返回指定键值下的所有数据的健 Value get(Integer root,String key)查询指定键值的数值 void set(Integer root,String key,Number value,Integer type)设置指定键值为数字 void set(Integer root,String key,String value,Integer type)设置指定键值为字符串 void set(Integer root,String key,Array value)设置指定键值为多字符串 void set(Integer root,String key,Buffer value)设置指定键值为二进制 void del(Integer root,String key)删除指定键值的数值 Field Detail CLASSES_ROOT const public const CLASSES_ROOTCLASSES_ROOTCLASSES_ROOT 注册表根，存储Windows可识别的文件类型的详细列表，以及相关联的程序 CURRENT_USER const public const CURRENT_USERCURRENT_USERCURRENT_USER 注册表根，存储当前用户设置的信息 LOCAL_MACHINE const public const LOCAL_MACHINELOCAL_MACHINELOCAL_MACHINE 注册表根，包括安装在计算机上的硬件和软件的信息 USERS const public const USERSUSERSUSERS 注册表根，包含使用计算机的用户的信息 CURRENT_CONFIG const public const CURRENT_CONFIGCURRENT_CONFIGCURRENT_CONFIG 注册表根，这个分支包含计算机当前的硬件配置信息 SZ const public const SZSZSZ 注册表数据类型，字符串 EXPAND_SZ const public const EXPAND_SZEXPAND_SZEXPAND_SZ 注册表数据类型，扩展字符串 DWORD const public const DWORDDWORDDWORD 注册表数据类型，32 位数值 QWORD const public const QWORDQWORDQWORD 注册表数据类型，64 位数值 Method Detail listSubKey List listSubKey(Integer root,String key) 返回指定键值下的所有子健 Parameters root 指定注册表根 key 指定键值 Returns 返回该键值下所有子健 listValue List listValue(Integer root,String key) 返回指定键值下的所有数据的健 Parameters root 指定注册表根 key 指定键值 Returns 返回该键值下所有数据的健 get Value get(Integer root,String key) 查询指定键值的数值 Parameters root 指定注册表根 key 指定键值 Returns 返回指定键值的数值 set void set(Integer root,String key,Number value,Integer type) 设置指定键值为数字 Parameters root 指定注册表根 key 指定键值 value 指定数字 type 指定类型，允许的类型为 DWORD 和 QWORD，缺省为 DWORD set void set(Integer root,String key,String value,Integer type) 设置指定键值为字符串 Parameters root 指定注册表根 key 指定键值 value 指定字符串 type 指定类型，允许的类型为 SZ 和 EXPAND_SZ，缺省为 SZ set void set(Integer root,String key,Array value) 设置指定键值为多字符串 Parameters root 指定注册表根 key 指定键值 value 指定多字符串数组 set void set(Integer root,String key,Buffer value) 设置指定键值为二进制 Parameters root 指定注册表根 key 指定键值 value 指定二进制数据 del void del(Integer root,String key) 删除指定键值的数值 Parameters root 指定注册表根 key 指定键值 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/rpc/",
	"title": "rpc",
	"tags": [],
	"description": "RPC module.",
	"content": "RPC module. To use it: var rpc = require(&#39;rpc&#39;); Summary Type Method and Description Handler json(Value hdlr)Generate a json-rpc message converter. Method Detail json Handler json(Value hdlr) Generate a json-rpc message converter. Parameters hdlr Built-in handler, handle function or javascript message mapping object, see mq.jsHandler Returns Return handler td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/ssl/",
	"title": "ssl",
	"tags": [],
	"description": "ssl/tls 模块",
	"content": "ssl/tls 模块 Field Summary Type Method and Description const public const VERIFY_NONEVERIFY_NONEVERIFY_NONE证书验证模式，不验证 const public const VERIFY_OPTIONALVERIFY_OPTIONALVERIFY_OPTIONAL证书验证模式，可选验证，允许验证不通过 const public const VERIFY_REQUIREDVERIFY_REQUIREDVERIFY_REQUIRED证书验证模式，要求验证，验证不通过则中断 const public const BADCERT_EXPIREDBADCERT_EXPIREDBADCERT_EXPIRED证书验证结果，证书超时 const public const BADCERT_REVOKEDBADCERT_REVOKEDBADCERT_REVOKED证书验证结果，证书被撤销 const public const BADCERT_CN_MISMATCHBADCERT_CN_MISMATCHBADCERT_CN_MISMATCH证书验证结果，证书名错误 const public const BADCERT_NOT_TRUSTEDBADCERT_NOT_TRUSTEDBADCERT_NOT_TRUSTED证书验证结果，证书不可信 const public const ssl3ssl3ssl3ssl 协议版本 ssl 3.0 const public const tls1tls1tls1ssl 协议版本 tls 1.0 const public const tls1_1tls1_1tls1_1ssl 协议版本 tls 1.1 const public const tls1_2tls1_2tls1_2ssl 协议版本 tls 1.2 readonly X509Cert public static readonly X509Cert cacaca全局证书，用于 ssl 客户端模式验证服务器证书 Integer public static Integer verificationverificationverification设定证书验证模式，缺省为 VERIFY_REQUIRED Integer public static Integer min_versionmin_versionmin_version设定最低版本支持，缺省 ssl3 Integer public static Integer max_versionmax_versionmax_version设定最高版本支持，缺省 tls1_1 Method Summary Type Method and Description SslSocket new Socket()创建一个 SslSocket 对象，参见 SslSocket SslHandler new Handler()创建一个 SslHandler 对象，参见 SslHandler SslServer new Server()创建一个 SslServer 对象，参见 SslServer Stream connect(String url,Integer timeout)创建一个 SslSocket 对象并建立连接 void setClientCert(X509Cert crt,PKey key)设定缺省客户端证书 void loadClientCertFile(String crtFile,String keyFile,String password)从文件中加载缺省客户端证书 Field Detail VERIFY_NONE const public const VERIFY_NONEVERIFY_NONEVERIFY_NONE 证书验证模式，不验证 VERIFY_OPTIONAL const public const VERIFY_OPTIONALVERIFY_OPTIONALVERIFY_OPTIONAL 证书验证模式，可选验证，允许验证不通过 VERIFY_REQUIRED const public const VERIFY_REQUIREDVERIFY_REQUIREDVERIFY_REQUIRED 证书验证模式，要求验证，验证不通过则中断 BADCERT_EXPIRED const public const BADCERT_EXPIREDBADCERT_EXPIREDBADCERT_EXPIRED 证书验证结果，证书超时 BADCERT_REVOKED const public const BADCERT_REVOKEDBADCERT_REVOKEDBADCERT_REVOKED 证书验证结果，证书被撤销 BADCERT_CN_MISMATCH const public const BADCERT_CN_MISMATCHBADCERT_CN_MISMATCHBADCERT_CN_MISMATCH 证书验证结果，证书名错误 BADCERT_NOT_TRUSTED const public const BADCERT_NOT_TRUSTEDBADCERT_NOT_TRUSTEDBADCERT_NOT_TRUSTED 证书验证结果，证书不可信 ssl3 const public const ssl3ssl3ssl3 ssl 协议版本 ssl 3.0 tls1 const public const tls1tls1tls1 ssl 协议版本 tls 1.0 tls1_1 const public const tls1_1tls1_1tls1_1 ssl 协议版本 tls 1.1 tls1_2 const public const tls1_2tls1_2tls1_2 ssl 协议版本 tls 1.2 ca readonly X509Cert public static readonly X509Cert cacaca 全局证书，用于 ssl 客户端模式验证服务器证书 verification Integer public static Integer verificationverificationverification 设定证书验证模式，缺省为 VERIFY_REQUIRED min_version Integer public static Integer min_versionmin_versionmin_version 设定最低版本支持，缺省 ssl3 max_version Integer public static Integer max_versionmax_versionmax_version 设定最高版本支持，缺省 tls1_1 Method Detail Socket SslSocket new Socket() 创建一个 SslSocket 对象，参见 SslSocket Handler SslHandler new Handler() 创建一个 SslHandler 对象，参见 SslHandler Server SslServer new Server() 创建一个 SslServer 对象，参见 SslServer connect Stream connect(String url,Integer timeout) 创建一个 SslSocket 对象并建立连接 Parameters url 指定连接的协议，可以是：ssl://host:port timeout 指定超时时间，单位是毫秒，默认为0 Returns 返回连接成功的 SslSocket 对象 setClientCert void setClientCert(X509Cert crt,PKey key) 设定缺省客户端证书 Parameters crt X509Cert 证书，用于客户端验证服务器 key PKey 私钥，用于与客户端会话 loadClientCertFile void loadClientCertFile(String crtFile,String keyFile,String password) 从文件中加载缺省客户端证书 Parameters crtFile X509Cert 证书文件，用于客户端验证服务器 keyFile PKey 私钥文件，用于与客户端会话 password 解密密码 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/test/",
	"title": "test",
	"tags": [],
	"description": "测试套件模块，用以定义管理测试套件",
	"content": "测试套件模块，用以定义管理测试套件 引用方法： var test = require(&#39;test&#39;); Field Summary Type Method and Description const public const BDDBDDBDD定义 BDD(Behavior Drive Development) 测试环境，支持 describe, xdescribe, it, xit, before, after, beforeEach 和 afterEach，同时初始化 assert 和expect const public const TDDTDDTDD定义 TDD(Test Drive Development) 测试环境，支持 suite, xsuite, test, xtest, setup, teardown, suiteSetup 和 suiteTeardown，同时初始化 assert 和expect void public static static assertassertassert断言测试模块，如果测试值为假，则报错，报错行为可设定继续运行或者错误抛出 Integer public static Integer slowslowslow设置和查询慢速测试警告阀值，以 ms 为单位，缺省为 75 Method Summary Type Method and Description void describe(String name,Function block)定义一个测试模块，可嵌套定义 void xdescribe(String name,Function block)停止测试的模块定义 void it(String name,Function block)定义一个测试项目 void xit(String name,Function block)禁止测试的项目定义 void before(Function func)定义当前测试模块进入事件 void after(Function func)定义当前测试模块退出事件 void beforeEach(Function func)定义当前测试模块测试项目进入事件 void afterEach(Function func)定义当前测试模块测试项目退出事件 Integer run(Integer loglevel)开始执行定义的测试模块 Expect expect(Value actual,String msg)expect 语法测试引擎 void setup(Integer mode)初始化当前脚本的测试环境，将 test 模块方法复制为当前脚本全局变量 Field Detail BDD const public const BDDBDDBDD 定义 BDD(Behavior Drive Development) 测试环境，支持 describe, xdescribe, it, xit, before, after, beforeEach 和 afterEach，同时初始化 assert 和expect TDD const public const TDDTDDTDD 定义 TDD(Test Drive Development) 测试环境，支持 suite, xsuite, test, xtest, setup, teardown, suiteSetup 和 suiteTeardown，同时初始化 assert 和expect assert void public static static assertassertassert 断言测试模块，如果测试值为假，则报错，报错行为可设定继续运行或者错误抛出 slow Integer public static Integer slowslowslow 设置和查询慢速测试警告阀值，以 ms 为单位，缺省为 75 Method Detail describe void describe(String name,Function block) 定义一个测试模块，可嵌套定义 Parameters name 定义模块名称 block 模块初始化代码 xdescribe void xdescribe(String name,Function block) 停止测试的模块定义 Parameters name 定义模块名称 block 模块初始化代码 it void it(String name,Function block) 定义一个测试项目 Parameters name 定义项目名称 block 测试内容 xit void xit(String name,Function block) 禁止测试的项目定义 Parameters name 定义项目名称 block 测试内容 before void before(Function func) 定义当前测试模块进入事件 Parameters func 事件函数 after void after(Function func) 定义当前测试模块退出事件 Parameters func 事件函数 beforeEach void beforeEach(Function func) 定义当前测试模块测试项目进入事件 Parameters func 事件函数 afterEach void afterEach(Function func) 定义当前测试模块测试项目退出事件 Parameters func 事件函数 run Integer run(Integer loglevel) 开始执行定义的测试模块 Parameters loglevel 指定进行测试时的日志输出级别，ERROR 时，项目报错信息集中在报告后显示，低于 ERROR 时，输出信息随时显示，高于 ERROR 时，只显示报告 Returns 返回测试用例统计结果，正确则返回 0，错误则返回错误个数 expect Expect expect(Value actual,String msg) expect 语法测试引擎 Parameters actual 指定要测试的数值 msg 断言失败时的提示信息 Returns 返回 Expect 对象用以链式调用 setup void setup(Integer mode) 初始化当前脚本的测试环境，将 test 模块方法复制为当前脚本全局变量 Parameters mode 指定初始化的模式，缺省为 BDD td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/url/",
	"title": "url",
	"tags": [],
	"description": "url 处理模块",
	"content": "url 处理模块 Method Summary Type Method and Description String format(Object args)参数构造 UrlObject 对象 UrlObject parse(String url,Boolean parseQueryString)解析一个 url 字符串 Method Detail format String format(Object args) 参数构造 UrlObject 对象 Parameters args 指定构造参数的字典对象，支持的字段有：protocol, slashes, username, password, hostname, port, pathname, query, hash parse UrlObject parse(String url,Boolean parseQueryString) 解析一个 url 字符串 Parameters url 指定需要解析的 url 字符串 parseQueryString 指定是否解析 query td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/util/",
	"title": "util",
	"tags": [],
	"description": "常用工具模块",
	"content": "常用工具模块 Field Summary Type Method and Description void public static static StatsStatsStats数据统计对象，用以构建应用运行时数据收集，参见 Stats 对象。 void public static static LruCacheLruCacheLruCacheLRU(least recently used) 缓存对象，参见 LruCache 对象。 Method Summary Type Method and Description String format(String fmt,...)按照指定的格式格式化变量 String format(...)格式格式化变量 void inherits(Value constructor,Value superConstructor)从一个构造函数 constructor 继承原型方法到另一个。构造函数的原型将被设置为一个新的从超类（superConstructor）创建的对象。 Boolean isEmpty(Value v)检测给定的变量是否不包含任何值(没有可枚举的属性) Boolean isArray(Value v)检测给定的变量是否是数组 Boolean isBoolean(Value v)检测给定的变量是否是 Boolean Boolean isNull(Value v)检测给定的变量是否是 Null Boolean isNullOrUndefined(Value v)检测给定的变量是否是 Null 或者 Undefined Boolean isNumber(Value v)检测给定的变量是否是数字 Boolean isString(Value v)检测给定的变量是否是字符串 Boolean isUndefined(Value v)检测给定的变量是否是 Undefined Boolean isRegExp(Value v)检测给定的变量是否是正则对象 Boolean isObject(Value v)检测给定的变量是否是对象 Boolean isDate(Value v)检测给定的变量是否是日期对象 Boolean isFunction(Value v)检测给定的变量是否是函数对象 Boolean isBuffer(Value v)检测给定的变量是否是函数 Buffer 对象 Boolean has(Value v,String key)查询指定对象是否包含给定的键 Array keys(Value v)查询指定对象的全部键数组 Array values(Value v)查询指定对象的全部值数组 Value clone(Value v)克隆给定变量，如果是对象或数组，则复制内容到新对象 Value extend(Value v,...)将一个或者多个对象的键值扩展到指定对象 Object pick(Value v,...)返回一个object副本，只过滤出指定键的属性值 Object omit(Value v,...)返回一个object副本，只过排除指定键的属性值 Value first(Value v)获取数组的第一个元素 Value first(Value v,Integer n)获取数组的开始多个元素 Value last(Value v)获取数组的第后一个元素 Value last(Value v,Integer n)获取数组的结尾多个元素 Array unique(Value v,Boolean sorted)获取数组的元素去重后的副本 Array union(...)将一个或者多个数组的值合并成一个值唯一的数组 Array intersection(...)返回一个包含 arr 数组中排除一个或者多个数组元素的交集 Array flatten(Value arr,Boolean shallow)将一个嵌套多层的数组(嵌套可以是任何层数)转换为只有一层的数组。 如果你传递 shallow 参数，数组将只减少一维的嵌套。 Array without(Value arr,...)返回一个包含 arr 数组中排除一个或者多个元素后的数组 Array difference(Array list,...)返回一个包含 arr 数组中排除 without 数组元素之后的数组 Value each(Value list,Function iterator,Value context)遍历 list 中的所有元素，按顺序用遍历输出每个元素。如果传递了 context 参数，则把 iterator 绑定到 context 对象上。每次调用 iterator 都会传递三个参数：(element, index, list) Array map(Value list,Function iterator,Value context)通过变换函数（iterator迭代器）把 list 中的每个值映射到一个新的数组中。如果传递了 context 参数，则把 iterator 绑定到 context 对象上。每次调用 iterator 都会传递三个参数：(element, index, list) Value reduce(Value list,Function iterator,Value memo,Value context)把 list中 元素归结为一个单独的数值。如果传递了 context 参数，则把 iterator 绑定到 context 对象上。每次调用 iterator 都会传递三个参数：(memo, element, index, list) Buffer compile(String srcname,String script,Integer mode)编译脚本为二进制代码 Buffer compile(String script,Integer mode)编译脚本为二进制代码 Object buildInfo()查询当前引擎及各组件版本信息 Field Detail Stats void public static static StatsStatsStats 数据统计对象，用以构建应用运行时数据收集，参见 Stats 对象。 LruCache void public static static LruCacheLruCacheLruCache LRU(least recently used) 缓存对象，参见 LruCache 对象。 Method Detail format String format(String fmt,...) 按照指定的格式格式化变量 Parameters fmt 格式化字符串 ... 可选参数列表 Returns 返回格式化后的字符串 format String format(...) 格式格式化变量 Parameters ... 可选参数列表 Returns 返回格式化后的字符串 inherits void inherits(Value constructor,Value superConstructor) 从一个构造函数 constructor 继承原型方法到另一个。构造函数的原型将被设置为一个新的从超类（superConstructor）创建的对象。 Parameters constructor 初始的构造函数 superConstructor 被继承的超类 isEmpty Boolean isEmpty(Value v) 检测给定的变量是否不包含任何值(没有可枚举的属性) Parameters v 给定需要检测的变量 Returns 如果为空则返回 True isArray Boolean isArray(Value v) 检测给定的变量是否是数组 Parameters v 给定需要检测的变量 Returns 如果是数组则返回 True isBoolean Boolean isBoolean(Value v) 检测给定的变量是否是 Boolean Parameters v 给定需要检测的变量 Returns 如果是 Boolean 则返回 True isNull Boolean isNull(Value v) 检测给定的变量是否是 Null Parameters v 给定需要检测的变量 Returns 如果是 Null 则返回 True isNullOrUndefined Boolean isNullOrUndefined(Value v) 检测给定的变量是否是 Null 或者 Undefined Parameters v 给定需要检测的变量 Returns 如果是 Null 或者 Undefined 则返回 True isNumber Boolean isNumber(Value v) 检测给定的变量是否是数字 Parameters v 给定需要检测的变量 Returns 如果是数字则返回 True isString Boolean isString(Value v) 检测给定的变量是否是字符串 Parameters v 给定需要检测的变量 Returns 如果是字符串则返回 True isUndefined Boolean isUndefined(Value v) 检测给定的变量是否是 Undefined Parameters v 给定需要检测的变量 Returns 如果是 Undefined 则返回 True isRegExp Boolean isRegExp(Value v) 检测给定的变量是否是正则对象 Parameters v 给定需要检测的变量 Returns 如果是正则对象则返回 True isObject Boolean isObject(Value v) 检测给定的变量是否是对象 Parameters v 给定需要检测的变量 Returns 如果是对象则返回 True isDate Boolean isDate(Value v) 检测给定的变量是否是日期对象 Parameters v 给定需要检测的变量 Returns 如果是日期对象则返回 True isFunction Boolean isFunction(Value v) 检测给定的变量是否是函数对象 Parameters v 给定需要检测的变量 Returns 如果是函数对象则返回 True isBuffer Boolean isBuffer(Value v) 检测给定的变量是否是函数 Buffer 对象 Parameters v 给定需要检测的变量 Returns 如果是函数 Buffer 对象则返回 True has Boolean has(Value v,String key) 查询指定对象是否包含给定的键 Parameters v 给定需要查询的对象 key 指定需要查询的键 Returns 返回对象的全部键数组 keys Array keys(Value v) 查询指定对象的全部键数组 Parameters v 给定需要查询的对象 Returns 返回对象的全部键数组 values Array values(Value v) 查询指定对象的全部值数组 Parameters v 给定需要查询的对象 Returns 返回对象的全部值数组 clone Value clone(Value v) 克隆给定变量，如果是对象或数组，则复制内容到新对象 Parameters v 给定要克隆的变量 Returns 返回克隆结果 extend Value extend(Value v,...) 将一个或者多个对象的键值扩展到指定对象 Parameters v 指定要扩展的对象 ... 指定一个或者多个用于扩展的对象 Returns 返回扩展的结果 pick Object pick(Value v,...) 返回一个object副本，只过滤出指定键的属性值 Parameters v 指定要过滤的对象 ... 指定一个或者多个用于选择的键 Returns 返回过滤的结果 omit Object omit(Value v,...) 返回一个object副本，只过排除指定键的属性值 Parameters v 指定要过滤的对象 ... 指定一个或者多个用于排除的键 Returns 返回排除的结果 first Value first(Value v) 获取数组的第一个元素 Parameters v 给定要获取的数组 Returns 返回获取的元素 first Value first(Value v,Integer n) 获取数组的开始多个元素 Parameters v 给定要获取的数组 n 指定要获取的元素个数 Returns 返回获取的元素数组 last Value last(Value v) 获取数组的第后一个元素 Parameters v 给定要获取的数组 Returns 返回获取的元素 last Value last(Value v,Integer n) 获取数组的结尾多个元素 Parameters v 给定要获取的数组 n 指定要获取的元素个数 Returns 返回获取的元素数组 unique Array unique(Value v,Boolean sorted) 获取数组的元素去重后的副本 Parameters v 给定要去重的数组 sorted 指定数组是否排序，如果指定数组排序，将使用快速算法 Returns 返回去重元素后的数组 union Array union(...) 将一个或者多个数组的值合并成一个值唯一的数组 Parameters ... 指定一个或者多个用于合并的数组 Returns 返回合并的结果 intersection Array intersection(...) 返回一个包含 arr 数组中排除一个或者多个数组元素的交集 Parameters ... 指定一个或者多个用于计算交集的数组 Returns 返回计算交集的结果 flatten Array flatten(Value arr,Boolean shallow) 将一个嵌套多层的数组(嵌套可以是任何层数)转换为只有一层的数组。 如果你传递 shallow 参数，数组将只减少一维的嵌套。 Parameters arr 指定需要转换的数组 shallow 指定是否只减少一维的嵌套，缺省为 false Returns 返回转换的结果 without Array without(Value arr,...) 返回一个包含 arr 数组中排除一个或者多个元素后的数组 Parameters arr 指定需要排除的数组 ... 指定一个或者多个用于排除的元素 Returns 返回排除的结果 difference Array difference(Array list,...) 返回一个包含 arr 数组中排除 without 数组元素之后的数组 Parameters list 指定需要排除的数组 ... 指定用于排除的一个或者多个数组 Returns 返回排除的结果 each Value each(Value list,Function iterator,Value context) 遍历 list 中的所有元素，按顺序用遍历输出每个元素。如果传递了 context 参数，则把 iterator 绑定到 context 对象上。每次调用 iterator 都会传递三个参数：(element, index, list) Parameters list 指定需要遍历的列表或对象 iterator 指定用于遍历的回调函数 context 指定调用 iterator 时绑定的 context 对象 Returns 返回 list 本身 map Array map(Value list,Function iterator,Value context) 通过变换函数（iterator迭代器）把 list 中的每个值映射到一个新的数组中。如果传递了 context 参数，则把 iterator 绑定到 context 对象上。每次调用 iterator 都会传递三个参数：(element, index, list) Parameters list 指定需要变换的列表或对象 iterator 指定用于变换的回调函数 context 指定调用 iterator 时绑定的 context 对象 Returns 返回变换的结果 reduce Value reduce(Value list,Function iterator,Value memo,Value context) 把 list中 元素归结为一个单独的数值。如果传递了 context 参数，则把 iterator 绑定到 context 对象上。每次调用 iterator 都会传递三个参数：(memo, element, index, list) Parameters list 指定需要归结的列表或对象 iterator 指定用于归结的回调函数 memo 指定归结的初始值 context 指定调用 iterator 时绑定的 context 对象 Returns 返回归结的结果 compile Buffer compile(String srcname,String script,Integer mode) 编译脚本为二进制代码 Parameters srcname 指定要添加的脚本名称 script 指定要编译的脚本代码 mode 编译模式，0: module, 1: main, 2: script, 3: worker，缺省为 0 Returns 返回编译出的二进制代码 compile Buffer compile(String script,Integer mode) 编译脚本为二进制代码 Parameters script 指定要编译的脚本代码 mode 编译模式，0: module, 1: main, 2: script, 3: worker，缺省为 0 Returns 返回编译出的二进制代码 buildInfo Object buildInfo() 查询当前引擎及各组件版本信息 Returns 返回结构如下： { &amp;quot;fibjs&amp;quot;: &amp;quot;0.1.0&amp;quot;, &amp;quot;svn&amp;quot;: 1753, &amp;quot;build&amp;quot;: &amp;quot;Dec 10 2013 21:44:17&amp;quot;, &amp;quot;vender&amp;quot;: { &amp;quot;ev&amp;quot;: &amp;quot;4.11&amp;quot;, &amp;quot;exif&amp;quot;: &amp;quot;0.6.21&amp;quot;, &amp;quot;gd&amp;quot;: &amp;quot;2.1.0-alpha&amp;quot;, &amp;quot;jpeg&amp;quot;: &amp;quot;8.3&amp;quot;, &amp;quot;log4cpp&amp;quot;: &amp;quot;1.0&amp;quot;, &amp;quot;mongo&amp;quot;: &amp;quot;0.7&amp;quot;, &amp;quot;pcre&amp;quot;: &amp;quot;8.21&amp;quot;, &amp;quot;png&amp;quot;: &amp;quot;1.5.4&amp;quot;, &amp;quot;sqlite&amp;quot;: &amp;quot;3.8.1&amp;quot;, &amp;quot;tiff&amp;quot;: &amp;quot;3.9.5&amp;quot;, &amp;quot;uuid&amp;quot;: &amp;quot;1.6.2&amp;quot;, &amp;quot;v8&amp;quot;: &amp;quot;3.23.17 (candidate)&amp;quot;, &amp;quot;zlib&amp;quot;: &amp;quot;1.2.7&amp;quot;, &amp;quot;zmq&amp;quot;: &amp;quot;3.1&amp;quot; } } td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/uuid/",
	"title": "uuid",
	"tags": [],
	"description": "uuid 唯一 id 模块",
	"content": "uuid 唯一 id 模块 基础模块。提供唯一 id 的创建于操作 var uuid = require(&#39;uuid&#39;); Field Summary Type Method and Description const public const DNSDNSDNSmd5 与 sha1 创建 uuid 时指定 name 命名为域名 const public const URLURLURLmd5 与 sha1 创建 uuid 时指定 name 命名为 url 地址 const public const OIDOIDOIDmd5 与 sha1 创建 uuid 时指定 name 命名为 ISO OID const public const X509X509X509md5 与 sha1 创建 uuid 时指定 name 命名为 X.500 DN Integer public static Integer hostIDhostIDhostID查询和修改 Snowflake 算法的主机 id Method Summary Type Method and Description Buffer node()使用时间和主机名创建 uuid Buffer md5(Integer ns,String name)使用特定命名的 md5 创建 uuid Buffer random()使用随机数创建 uuid Buffer sha1(Integer ns,String name)使用特定命名的 sha1 创建 uuid Buffer snowflake()使用 Snowflake 算法创建 uuid Field Detail DNS const public const DNSDNSDNS md5 与 sha1 创建 uuid 时指定 name 命名为域名 URL const public const URLURLURL md5 与 sha1 创建 uuid 时指定 name 命名为 url 地址 OID const public const OIDOIDOID md5 与 sha1 创建 uuid 时指定 name 命名为 ISO OID X509 const public const X509X509X509 md5 与 sha1 创建 uuid 时指定 name 命名为 X.500 DN hostID Integer public static Integer hostIDhostIDhostID 查询和修改 Snowflake 算法的主机 id Method Detail node Buffer node() 使用时间和主机名创建 uuid Returns 返回一个生成的二进制 id md5 Buffer md5(Integer ns,String name) 使用特定命名的 md5 创建 uuid Parameters ns 指定命名空间，可以为 uuid.DNS, uuid.URL, uuid.OID, uuid.X509 name 指定名称 Returns 返回一个生成的二进制 id random Buffer random() 使用随机数创建 uuid Returns 返回一个生成的二进制 id sha1 Buffer sha1(Integer ns,String name) 使用特定命名的 sha1 创建 uuid Parameters ns 指定命名空间，可以为 uuid.DNS, uuid.URL, uuid.OID, uuid.X509 name 指定名称 Returns 返回一个生成的二进制 id snowflake Buffer snowflake() 使用 Snowflake 算法创建 uuid Returns 返回一个生成的二进制 id td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/vm/",
	"title": "vm",
	"tags": [],
	"description": "安全沙箱模块，用于隔离不同安全等级的运行环境",
	"content": "安全沙箱模块，用于隔离不同安全等级的运行环境 通过建立安全沙箱，可以限制脚本运行时可以接触的资源，隔离不同脚本执行环境，并可以为不同的环境定制基础模块，以保障整体运行环境的安全。 下面的示例创建一个沙箱，限制只允许访问全局基础模块中的 assert 模块，并添加 a 和 b 两个定制模块： var vm = require(&#39;vm&#39;); var sbox = new vm.SandBox({ a: 100, b: 200, assert: require(&#39;assert&#39;) }); var mod_in_sbox = sbox.require(&#39;./path/to/mod&#39;); Method Summary Type Method and Description SandBox new SandBox()创建一个 SandBox 对象，参见 SandBox Method Detail SandBox SandBox new SandBox() 创建一个 SandBox 对象，参见 SandBox td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/websocket/",
	"title": "websocket",
	"tags": [],
	"description": "websocket support module",
	"content": "websocket support module To use it: var websocket = require(&#39;websocket&#39;); Summary Type Method and Description const Integer public const Integer CONTINUECONTINUECONTINUESpecifies the message type 0 of websocket, which is a continue frame. const Integer public const Integer TEXTTEXTTEXTSpecifies the message type 1 of websocket, which is a text frame. const Integer public const Integer BINARYBINARYBINARYSpecifies the message type 2 of websocket, which is a binary frame. const Integer public const Integer CLOSECLOSECLOSESpecifies the message type 8 of websocket, which means connection closed. const Integer public const Integer PINGPINGPINGSpecifies the message type 9 of websocket, which is a ping frame. const Integer public const Integer PONGPONGPONGSpecifies the message type 10 of websocket, which is a pong frame. WebSocketMessage new Message()Create one websocket message object, refer WebSocketMessage. WebSocketHandler new Handler()Create one websocket packet protocol conversion processor, refer WebSocketHandler. Stream connect(String url)Create one websocket connection, and return a completed connection Stream object. Method Detail CONTINUE const Integer public const Integer CONTINUECONTINUECONTINUE Specifies the message type 0 of websocket, which is a continue frame. TEXT const Integer public const Integer TEXTTEXTTEXT Specifies the message type 1 of websocket, which is a text frame. BINARY const Integer public const Integer BINARYBINARYBINARY Specifies the message type 2 of websocket, which is a binary frame. CLOSE const Integer public const Integer CLOSECLOSECLOSE Specifies the message type 8 of websocket, which means connection closed. PING const Integer public const Integer PINGPINGPING Specifies the message type 9 of websocket, which is a ping frame. PONG const Integer public const Integer PONGPONGPONG Specifies the message type 10 of websocket, which is a pong frame. Message WebSocketMessage new Message() Create one websocket message object, refer WebSocketMessage. Handler WebSocketHandler new Handler() Create one websocket packet protocol conversion processor, refer WebSocketHandler. connect Stream connect(String url) Create one websocket connection, and return a completed connection Stream object. Parameters url Specifies the connection url，support ws:// and wss:// protocol Returns Return a completed connection Stream object, which can be Socket or SslSocket td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/ws/",
	"title": "ws",
	"tags": [],
	"description": "websocket 支持模块",
	"content": "websocket 支持模块 使用方法： var ws = require(&#39;ws&#39;); Field Summary Type Method and Description const public const CONTINUECONTINUECONTINUE指定 websocket 消息类型 0，代表一个继续帧 const public const TEXTTEXTTEXT指定 websocket 消息类型 1，代表一个文本帧 const public const BINARYBINARYBINARY指定 websocket 消息类型 2，代表一个二进制帧 const public const CLOSECLOSECLOSE指定 websocket 消息类型 8，连接关闭 const public const PINGPINGPING指定 websocket 消息类型 9，代表一个 ping 帧 const public const PONGPONGPONG指定 websocket 消息类型 10，代表一个 pong 帧 const public const CONNECTINGCONNECTINGCONNECTING const public const OPENOPENOPEN const public const CLOSINGCLOSINGCLOSING const public const CLOSEDCLOSEDCLOSED Method Summary Type Method and Description WebSocketMessage new Message()创建一个 websocket 消息对象，参见 WebSocketMessage WebSocketHandler new Handler()创建一个 websocket 包协议转换处理器，参见 WebSocketHandler WebSocket new Socket() Stream connect(String url,String origin)创建一个 websocket 连接，并返回握手成功的 Stream 对象 Handler upgrade(Function accept)创建一个 websocket 协议处理器，从 http 接收 upgrade 请求并握手，生成 WebSocket 对象 Field Detail CONTINUE const public const CONTINUECONTINUECONTINUE 指定 websocket 消息类型 0，代表一个继续帧 TEXT const public const TEXTTEXTTEXT 指定 websocket 消息类型 1，代表一个文本帧 BINARY const public const BINARYBINARYBINARY 指定 websocket 消息类型 2，代表一个二进制帧 CLOSE const public const CLOSECLOSECLOSE 指定 websocket 消息类型 8，连接关闭 PING const public const PINGPINGPING 指定 websocket 消息类型 9，代表一个 ping 帧 PONG const public const PONGPONGPONG 指定 websocket 消息类型 10，代表一个 pong 帧 CONNECTING const public const CONNECTINGCONNECTINGCONNECTING OPEN const public const OPENOPENOPEN CLOSING const public const CLOSINGCLOSINGCLOSING CLOSED const public const CLOSEDCLOSEDCLOSED Method Detail Message WebSocketMessage new Message() 创建一个 websocket 消息对象，参见 WebSocketMessage Handler WebSocketHandler new Handler() 创建一个 websocket 包协议转换处理器，参见 WebSocketHandler Socket WebSocket new Socket() connect Stream connect(String url,String origin) 创建一个 websocket 连接，并返回握手成功的 Stream 对象 Parameters url 指定连接的 url，支持 ws:// 和 wss:// 协议 origin 指定连接的授权域名 Returns 返回连接成功的 Stream 对象，可能为 Socket 或者 SslSocket upgrade Handler upgrade(Function accept) 创建一个 websocket 协议处理器，从 http 接收 upgrade 请求并握手，生成 WebSocket 对象 Parameters accept 连接成功处理函数，参数为 WebSocket 对象 Returns 返回协议处理器，可与 HttpServer, Chain, Routing 等对接 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/xml/",
	"title": "xml",
	"tags": [],
	"description": "xml 处理模块",
	"content": "xml 处理模块 Field Summary Type Method and Description const public const ELEMENT_NODEELEMENT_NODEELEMENT_NODEXmlNode 的 nodeType 属性常量，表示节点为 XmlElement 对象 const public const ATTRIBUTE_NODEATTRIBUTE_NODEATTRIBUTE_NODEXmlNode 的 nodeType 属性常量，表示节点为 XmlAttr 对象 const public const TEXT_NODETEXT_NODETEXT_NODEXmlNode 的 nodeType 属性常量，表示节点为 XmlText 对象 const public const CDATA_SECTION_NODECDATA_SECTION_NODECDATA_SECTION_NODEXmlNode 的 nodeType 属性常量，表示节点为 XmlCDATASection 对象 const public const PROCESSING_INSTRUCTION_NODEPROCESSING_INSTRUCTION_NODEPROCESSING_INSTRUCTION_NODEXmlNode 的 nodeType 属性常量，表示节点为 XmlProcessingInstruction 对象 const public const COMMENT_NODECOMMENT_NODECOMMENT_NODEXmlNode 的 nodeType 属性常量，表示节点为 XmlComment 对象 const public const DOCUMENT_NODEDOCUMENT_NODEDOCUMENT_NODEXmlNode 的 nodeType 属性常量，表示节点为 XmlDocument 对象 const public const DOCUMENT_TYPE_NODEDOCUMENT_TYPE_NODEDOCUMENT_TYPE_NODEXmlNode 的 nodeType 属性常量，表示节点为 XmlDocumentType 对象 Method Summary Type Method and Description XmlDocument new Document()xml 文档对象，参见 XmlDocument 对象 XmlDocument parse(String source,String type)解析 xml/html 文本，并创建 XmlDocument 对象，不支持多语种 XmlDocument parse(Buffer source,String type)解析 xml/html，并创建 XmlDocument 对象，解析时会根据指定的语种转换 String serialize(XmlNode node)序列化 XmlNode 为字符串 Field Detail ELEMENT_NODE const public const ELEMENT_NODEELEMENT_NODEELEMENT_NODE XmlNode 的 nodeType 属性常量，表示节点为 XmlElement 对象 ATTRIBUTE_NODE const public const ATTRIBUTE_NODEATTRIBUTE_NODEATTRIBUTE_NODE XmlNode 的 nodeType 属性常量，表示节点为 XmlAttr 对象 TEXT_NODE const public const TEXT_NODETEXT_NODETEXT_NODE XmlNode 的 nodeType 属性常量，表示节点为 XmlText 对象 CDATA_SECTION_NODE const public const CDATA_SECTION_NODECDATA_SECTION_NODECDATA_SECTION_NODE XmlNode 的 nodeType 属性常量，表示节点为 XmlCDATASection 对象 PROCESSING_INSTRUCTION_NODE const public const PROCESSING_INSTRUCTION_NODEPROCESSING_INSTRUCTION_NODEPROCESSING_INSTRUCTION_NODE XmlNode 的 nodeType 属性常量，表示节点为 XmlProcessingInstruction 对象 COMMENT_NODE const public const COMMENT_NODECOMMENT_NODECOMMENT_NODE XmlNode 的 nodeType 属性常量，表示节点为 XmlComment 对象 DOCUMENT_NODE const public const DOCUMENT_NODEDOCUMENT_NODEDOCUMENT_NODE XmlNode 的 nodeType 属性常量，表示节点为 XmlDocument 对象 DOCUMENT_TYPE_NODE const public const DOCUMENT_TYPE_NODEDOCUMENT_TYPE_NODEDOCUMENT_TYPE_NODE XmlNode 的 nodeType 属性常量，表示节点为 XmlDocumentType 对象 Method Detail Document XmlDocument new Document() xml 文档对象，参见 XmlDocument 对象 parse XmlDocument parse(String source,String type) 解析 xml/html 文本，并创建 XmlDocument 对象，不支持多语种 Parameters source 指定需要解析的 xml/html 文本 type 指定文本类型，缺省为 text/xml，也可指定为 text/html Returns 返回创建的 XmlDocument 对象 parse XmlDocument parse(Buffer source,String type) 解析 xml/html，并创建 XmlDocument 对象，解析时会根据指定的语种转换 Parameters source 指定需要解析的 xml/html 二进制数据 type 指定文本类型，缺省为 text/xml，也可指定为 text/html Returns 返回创建的 XmlDocument 对象 serialize String serialize(XmlNode node) 序列化 XmlNode 为字符串 Parameters node 指定需要序列化的 XmlNode Returns 返回序列化的字符串 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/zip/",
	"title": "zip",
	"tags": [],
	"description": "zip 格式文件压缩解压模块",
	"content": "zip 格式文件压缩解压模块 使用方法： var zip = require(&#39;zip&#39;); Field Summary Type Method and Description const public const ZIP_STOREDZIP_STOREDZIP_STORED压缩类型常量, 不压缩, 仅存储 const public const ZIP_DEFLATEDZIP_DEFLATEDZIP_DEFLATED压缩类型常量, 需要依赖zlib库进行压缩 Method Summary Type Method and Description Boolean isZipFile(String filename)判断文件是否是zip格式 ZipFile open(String path,String mod,Integer compress_type)打开一个zip文件 ZipFile open(Buffer data,String mod,Integer compress_type)打开一个zip文件 ZipFile open(SeekableStream strm,String mod,Integer compress_type)打开一个zip文件 Field Detail ZIP_STORED const public const ZIP_STOREDZIP_STOREDZIP_STORED 压缩类型常量, 不压缩, 仅存储 ZIP_DEFLATED const public const ZIP_DEFLATEDZIP_DEFLATEDZIP_DEFLATED 压缩类型常量, 需要依赖zlib库进行压缩 Method Detail isZipFile Boolean isZipFile(String filename) 判断文件是否是zip格式 Parameters filename 文件名 Returns 返回true代表文件是zip文件 open ZipFile open(String path,String mod,Integer compress_type) 打开一个zip文件 Parameters path 文件路径 mod 打开文件模式, &amp;ldquo;r&amp;rdquo;代表读取, &amp;ldquo;w&amp;rdquo;代表创建, &amp;ldquo;a&amp;rdquo;代表在zip文件后追加 compress_type 压缩类型, ZIP_STORED 代表不压缩, 仅存储。 默认使用ZIP_DEFLATED 代表使用zlib库进行压缩。 Returns 返回zip文件对象 open ZipFile open(Buffer data,String mod,Integer compress_type) 打开一个zip文件 Parameters data zip文件数据 mod 打开文件模式, &amp;ldquo;r&amp;rdquo;代表读取, &amp;ldquo;w&amp;rdquo;代表创建, &amp;ldquo;a&amp;rdquo;代表在zip文件后追加 compress_type 压缩类型, ZIP_STORED 代表不压缩, 仅存储。 默认使用ZIP_DEFLATED 代表使用zlib库进行压缩。 Returns 返回zip文件对象 open ZipFile open(SeekableStream strm,String mod,Integer compress_type) 打开一个zip文件 Parameters strm zip文件流 mod 打开文件模式, &amp;ldquo;r&amp;rdquo;代表读取, &amp;ldquo;w&amp;rdquo;代表创建, &amp;ldquo;a&amp;rdquo;代表在zip文件后追加 compress_type 压缩类型, ZIP_STORED 代表不压缩, 仅存储。 默认使用ZIP_DEFLATED 代表使用zlib库进行压缩。 Returns 返回zip文件对象 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/zlib/",
	"title": "zlib",
	"tags": [],
	"description": "zlib 压缩解压模块",
	"content": "zlib 压缩解压模块 使用方法： var zlib = require(&#39;zlib&#39;); Field Summary Type Method and Description const public const NO_COMPRESSIONNO_COMPRESSIONNO_COMPRESSIONdeflate 压缩级别，设定不压缩 const public const BEST_SPEEDBEST_SPEEDBEST_SPEEDdeflate 压缩级别，设定最快压缩 const public const BEST_COMPRESSIONBEST_COMPRESSIONBEST_COMPRESSIONdeflate 压缩级别，设定最高压缩 const public const DEFAULT_COMPRESSIONDEFAULT_COMPRESSIONDEFAULT_COMPRESSIONdeflate 压缩级别，设定缺省设置 Method Summary Type Method and Description Buffer deflate(Buffer data,Integer level)使用 deflate 算法压缩数据(zlib格式) void deflateTo(Buffer data,Stream stm,Integer level)使用 deflate 算法压缩数据到流对象中(zlib格式) void deflateTo(Stream src,Stream stm,Integer level)使用 deflate 算法压缩源流中的数据到流对象中(zlib格式) Buffer inflate(Buffer data)解压缩 deflate 算法压缩的数据(zlib格式) void inflateTo(Buffer data,Stream stm)解压缩 deflate 算法压缩的数据到流对象中(zlib格式) void inflateTo(Stream src,Stream stm)解压缩源流中 deflate 算法压缩的数据到流对象中(zlib格式) Buffer gzip(Buffer data)使用 gzip 算法压缩数据 void gzipTo(Buffer data,Stream stm)使用 gzip 算法压缩数据到流对象中 void gzipTo(Stream src,Stream stm)使用 gzip 算法压缩源流中的数据到流对象中 Buffer gunzip(Buffer data)解压缩 gzip 算法压缩的数据 void gunzipTo(Buffer data,Stream stm)解压缩 gzip 算法压缩的数据到流对象中 void gunzipTo(Stream src,Stream stm)解压缩源流中 gzip 算法压缩的数据到流对象中 Buffer deflateRaw(Buffer data,Integer level)使用 deflate 算法压缩数据(deflateRaw) void deflateRawTo(Buffer data,Stream stm,Integer level)使用 deflate 算法压缩数据到流对象中(deflateRaw) void deflateRawTo(Stream src,Stream stm,Integer level)使用 deflate 算法压缩源流中的数据到流对象中(deflateRaw) Buffer inflateRaw(Buffer data)解压缩 deflate 算法压缩的数据(inflateRaw) void inflateRawTo(Buffer data,Stream stm)解压缩 deflate 算法压缩的数据到流对象中(inflateRaw) void inflateRawTo(Stream src,Stream stm)解压缩源流中 deflate 算法压缩的数据到流对象中(inflateRaw) Field Detail NO_COMPRESSION const public const NO_COMPRESSIONNO_COMPRESSIONNO_COMPRESSION deflate 压缩级别，设定不压缩 BEST_SPEED const public const BEST_SPEEDBEST_SPEEDBEST_SPEED deflate 压缩级别，设定最快压缩 BEST_COMPRESSION const public const BEST_COMPRESSIONBEST_COMPRESSIONBEST_COMPRESSION deflate 压缩级别，设定最高压缩 DEFAULT_COMPRESSION const public const DEFAULT_COMPRESSIONDEFAULT_COMPRESSIONDEFAULT_COMPRESSION deflate 压缩级别，设定缺省设置 Method Detail deflate Buffer deflate(Buffer data,Integer level) 使用 deflate 算法压缩数据(zlib格式) Parameters data 给定要压缩的数据 level 指定压缩级别，缺省为 DEFAULT_COMPRESSION Returns 返回压缩后的二进制数据 deflateTo void deflateTo(Buffer data,Stream stm,Integer level) 使用 deflate 算法压缩数据到流对象中(zlib格式) Parameters data 给定要压缩的数据 stm 指定存储压缩数据的流 level 指定压缩级别，缺省为 DEFAULT_COMPRESSION deflateTo void deflateTo(Stream src,Stream stm,Integer level) 使用 deflate 算法压缩源流中的数据到流对象中(zlib格式) Parameters src 给定要压缩的数据所在的流 stm 指定存储压缩数据的流 level 指定压缩级别，缺省为 DEFAULT_COMPRESSION inflate Buffer inflate(Buffer data) 解压缩 deflate 算法压缩的数据(zlib格式) Parameters data 给定压缩后的数据 Returns 返回解压缩后的二进制数据 inflateTo void inflateTo(Buffer data,Stream stm) 解压缩 deflate 算法压缩的数据到流对象中(zlib格式) Parameters data 给定要解压缩的数据 stm 指定存储解压缩数据的流 inflateTo void inflateTo(Stream src,Stream stm) 解压缩源流中 deflate 算法压缩的数据到流对象中(zlib格式) Parameters src 给定要解压缩的数据所在的流 stm 指定存储解压缩数据的流 gzip Buffer gzip(Buffer data) 使用 gzip 算法压缩数据 Parameters data 给定要压缩的数据 Returns 返回压缩后的二进制数据 gzipTo void gzipTo(Buffer data,Stream stm) 使用 gzip 算法压缩数据到流对象中 Parameters data 给定要压缩的数据 stm 指定存储压缩数据的流 gzipTo void gzipTo(Stream src,Stream stm) 使用 gzip 算法压缩源流中的数据到流对象中 Parameters src 给定要压缩的数据所在的流 stm 指定存储压缩数据的流 gunzip Buffer gunzip(Buffer data) 解压缩 gzip 算法压缩的数据 Parameters data 给定压缩后的数据 Returns 返回解压缩后的二进制数据 gunzipTo void gunzipTo(Buffer data,Stream stm) 解压缩 gzip 算法压缩的数据到流对象中 Parameters data 给定要解压缩的数据 stm 指定存储解压缩数据的流 gunzipTo void gunzipTo(Stream src,Stream stm) 解压缩源流中 gzip 算法压缩的数据到流对象中 Parameters src 给定要解压缩的数据所在的流 stm 指定存储解压缩数据的流 deflateRaw Buffer deflateRaw(Buffer data,Integer level) 使用 deflate 算法压缩数据(deflateRaw) Parameters data 给定要压缩的数据 level 指定压缩级别，缺省为 DEFAULT_COMPRESSION Returns 返回压缩后的二进制数据 deflateRawTo void deflateRawTo(Buffer data,Stream stm,Integer level) 使用 deflate 算法压缩数据到流对象中(deflateRaw) Parameters data 给定要压缩的数据 stm 指定存储压缩数据的流 level 指定压缩级别，缺省为 DEFAULT_COMPRESSION deflateRawTo void deflateRawTo(Stream src,Stream stm,Integer level) 使用 deflate 算法压缩源流中的数据到流对象中(deflateRaw) Parameters src 给定要压缩的数据所在的流 stm 指定存储压缩数据的流 level 指定压缩级别，缺省为 DEFAULT_COMPRESSION inflateRaw Buffer inflateRaw(Buffer data) 解压缩 deflate 算法压缩的数据(inflateRaw) Parameters data 给定压缩后的数据 Returns 返回解压缩后的二进制数据 inflateRawTo void inflateRawTo(Buffer data,Stream stm) 解压缩 deflate 算法压缩的数据到流对象中(inflateRaw) Parameters data 给定要解压缩的数据 stm 指定存储解压缩数据的流 inflateRawTo void inflateRawTo(Stream src,Stream stm) 解压缩源流中 deflate 算法压缩的数据到流对象中(inflateRaw) Parameters src 给定要解压缩的数据所在的流 stm 指定存储解压缩数据的流 td { vertical-align: top; } "
},
{
	"uri": "http://example.org/module/zmq/",
	"title": "zmq",
	"tags": [],
	"description": "zeroMQ 消息队列模块",
	"content": "zeroMQ 消息队列模块 基础模块。提供 zeroMQ 消息队列支撑。 var zmq = require(&#39;zmq&#39;); Field Summary Type Method and Description const public const PAIRPAIRPAIR const public const PUBPUBPUB发布类型，所发送的消息将会分发给所有订阅者。 const public const SUBSUBSUB订阅类型，用于接收 PUB 分发的消息。 const public const REQREQREQ请求类型，此类型的接口只允许交替进行 send 和 recv 消息，每一个接受的消息都是最后一次发送请求的响应。 const public const REPREPREP响应类型，此类型的接口只允许交替进行 recv 和 send 消息，每一个发送的消息都会作为最后一次接受的请求的回应。 const public const DEALERDEALERDEALER const public const ROUTERROUTERROUTER const public const PULLPULLPULL获取消息类型，上游推送的消息将被公平的分发到此类接口。 const public const PUSHPUSHPUSH推送类型，推送的消息将均衡发送到下游接口。 const public const XPUBXPUBXPUB const public const XSUBXSUBXSUB Method Summary Type Method and Description ZmqSocket new Socket() Field Detail PAIR const public const PAIRPAIRPAIR PUB const public const PUBPUBPUB 发布类型，所发送的消息将会分发给所有订阅者。 SUB const public const SUBSUBSUB 订阅类型，用于接收 PUB 分发的消息。 REQ const public const REQREQREQ 请求类型，此类型的接口只允许交替进行 send 和 recv 消息，每一个接受的消息都是最后一次发送请求的响应。 REP const public const REPREPREP 响应类型，此类型的接口只允许交替进行 recv 和 send 消息，每一个发送的消息都会作为最后一次接受的请求的回应。 DEALER const public const DEALERDEALERDEALER ROUTER const public const ROUTERROUTERROUTER PULL const public const PULLPULLPULL 获取消息类型，上游推送的消息将被公平的分发到此类接口。 PUSH const public const PUSHPUSHPUSH 推送类型，推送的消息将均衡发送到下游接口。 XPUB const public const XPUBXPUBXPUB XSUB const public const XSUBXSUBXSUB Method Detail Socket ZmqSocket new Socket() td { vertical-align: top; } "
}]